DIGEST 559a5e8e1c28b0bac32d06ff95e6f38f
FEquiv
R89:91 Imp <> <> lib
def 2341:2346 <> aequiv
R2357:2360 Imp <> aexp ind
R2386:2390 Imp <> state def
R2410:2412 Coq.Init.Logic <> :type_scope:x_'='_x not
R2399:2403 Imp <> aeval def
R2408:2409 Equiv <> a1 var
R2405:2406 Equiv <> st var
R2413:2417 Imp <> aeval def
R2422:2423 Equiv <> a2 var
R2419:2420 Equiv <> st var
def 2438:2443 <> bequiv
R2454:2457 Imp <> bexp ind
R2483:2487 Imp <> state def
R2507:2509 Coq.Init.Logic <> :type_scope:x_'='_x not
R2496:2500 Imp <> beval def
R2505:2506 Equiv <> b1 var
R2502:2503 Equiv <> st var
R2510:2514 Imp <> beval def
R2519:2520 Equiv <> b2 var
R2516:2517 Equiv <> st var
def 3183:3188 <> cequiv
R3199:3201 Imp <> com ind
R3233:3237 Imp <> state def
R3246:3246 Coq.Init.Logic <> :type_scope:x_'<->'_x not
R3261:3267 Coq.Init.Logic <> :type_scope:x_'<->'_x not
R3282:3282 Coq.Init.Logic <> :type_scope:x_'<->'_x not
R3249:3251 Imp <> ::x_'/'_x_'||'_x not
R3254:3257 Imp <> ::x_'/'_x_'||'_x not
R3247:3248 Equiv <> c1 var
R3252:3253 Equiv <> st var
R3258:3260 Equiv <> st' var
R3270:3272 Imp <> ::x_'/'_x_'||'_x not
R3275:3278 Imp <> ::x_'/'_x_'||'_x not
R3268:3269 Equiv <> c2 var
R3273:3274 Equiv <> st var
R3279:3281 Equiv <> st' var
prf 4449:4462 <> aequiv_example
R4467:4472 Equiv <> aequiv def
R4500:4503 Imp <> ANum constr
R4475:4480 Imp <> AMinus constr
R4491:4493 Imp <> AId constr
R4495:4495 Imp <> X def
R4483:4485 Imp <> AId constr
R4487:4487 Imp <> X def
R4542:4551 Coq.Arith.Minus <> minus_diag thm
R4542:4551 Coq.Arith.Minus <> minus_diag thm
prf 4570:4583 <> bequiv_example
R4588:4593 Equiv <> bequiv def
R4635:4639 Imp <> BTrue constr
R4596:4598 Imp <> BEq constr
R4626:4629 Imp <> ANum constr
R4601:4606 Imp <> AMinus constr
R4617:4619 Imp <> AId constr
R4621:4621 Imp <> X def
R4609:4611 Imp <> AId constr
R4613:4613 Imp <> X def
R4671:4675 Imp <> beval def
R4688:4701 Equiv <> aequiv_example thm
R4688:4701 Equiv <> aequiv_example thm
prf 4861:4869 <> skip_left
R4884:4889 Equiv <> cequiv def
R4913:4913 Equiv <> c var
R4902:4903 Imp <> ::x_';'_x not
R4898:4901 Imp <> ::'SKIP' not
R4904:4904 Equiv <> c var
R5091:5095 Imp <> E_Seq constr
R5091:5095 Imp <> E_Seq constr
R5116:5121 Imp <> E_Skip constr
R5116:5121 Imp <> E_Skip constr
prf 5286:5295 <> skip_right
R5310:5315 Equiv <> cequiv def
R5337:5337 Equiv <> c var
R5324:5325 Imp <> ::x_';'_x not
R5323:5323 Equiv <> c var
R5326:5329 Imp <> ::'SKIP' not
R5475:5479 Imp <> E_Seq constr
R5475:5479 Imp <> E_Seq constr
R5510:5515 Imp <> E_Skip constr
R5510:5515 Imp <> E_Skip constr
prf 5631:5645 <> IFB_true_simple
R5664:5669 Equiv <> cequiv def
R5712:5713 Equiv <> c1 var
R5677:5680 Imp <> ::'IFB'_x_'THEN'_x_'ELSE'_x_'FI' not
R5686:5691 Imp <> ::'IFB'_x_'THEN'_x_'ELSE'_x_'FI' not
R5694:5699 Imp <> ::'IFB'_x_'THEN'_x_'ELSE'_x_'FI' not
R5702:5704 Imp <> ::'IFB'_x_'THEN'_x_'ELSE'_x_'FI' not
R5681:5685 Imp <> BTrue constr
R5692:5693 Equiv <> c1 var
R5700:5701 Equiv <> c2 var
R5846:5853 Imp <> E_IfTrue constr
R5846:5853 Imp <> E_IfTrue constr
prf 7758:7765 <> IFB_true
R7813:7818 Equiv <> cequiv def
R7863:7864 Equiv <> c1 var
R7829:7832 Imp <> ::'IFB'_x_'THEN'_x_'ELSE'_x_'FI' not
R7834:7839 Imp <> ::'IFB'_x_'THEN'_x_'ELSE'_x_'FI' not
R7842:7847 Imp <> ::'IFB'_x_'THEN'_x_'ELSE'_x_'FI' not
R7850:7852 Imp <> ::'IFB'_x_'THEN'_x_'ELSE'_x_'FI' not
R7833:7833 Equiv <> b var
R7840:7841 Equiv <> c1 var
R7848:7849 Equiv <> c2 var
R7789:7794 Equiv <> bequiv def
R7798:7802 Imp <> BTrue constr
R7796:7796 Equiv <> b var
R8119:8126 Imp <> E_IfTrue constr
R8119:8126 Imp <> E_IfTrue constr
prf 8231:8239 <> IFB_false
R8282:8287 Equiv <> cequiv def
R8326:8327 Equiv <> c2 var
R8295:8298 Imp <> ::'IFB'_x_'THEN'_x_'ELSE'_x_'FI' not
R8300:8305 Imp <> ::'IFB'_x_'THEN'_x_'ELSE'_x_'FI' not
R8308:8313 Imp <> ::'IFB'_x_'THEN'_x_'ELSE'_x_'FI' not
R8316:8318 Imp <> ::'IFB'_x_'THEN'_x_'ELSE'_x_'FI' not
R8299:8299 Equiv <> b var
R8306:8307 Equiv <> c1 var
R8314:8315 Equiv <> c2 var
R8260:8265 Equiv <> bequiv def
R8269:8274 Imp <> BFalse constr
R8267:8267 Equiv <> b var
R8547:8555 Imp <> E_IfFalse constr
R8547:8555 Imp <> E_IfFalse constr
prf 8754:8769 <> swap_if_branches
R8790:8795 Equiv <> cequiv def
R8833:8836 Imp <> ::'IFB'_x_'THEN'_x_'ELSE'_x_'FI' not
R8843:8848 Imp <> ::'IFB'_x_'THEN'_x_'ELSE'_x_'FI' not
R8851:8856 Imp <> ::'IFB'_x_'THEN'_x_'ELSE'_x_'FI' not
R8859:8861 Imp <> ::'IFB'_x_'THEN'_x_'ELSE'_x_'FI' not
R8837:8840 Imp <> BNot constr
R8842:8842 Equiv <> b var
R8849:8850 Equiv <> e2 var
R8857:8858 Equiv <> e1 var
R8802:8805 Imp <> ::'IFB'_x_'THEN'_x_'ELSE'_x_'FI' not
R8807:8812 Imp <> ::'IFB'_x_'THEN'_x_'ELSE'_x_'FI' not
R8815:8820 Imp <> ::'IFB'_x_'THEN'_x_'ELSE'_x_'FI' not
R8823:8825 Imp <> ::'IFB'_x_'THEN'_x_'ELSE'_x_'FI' not
R8806:8806 Equiv <> b var
R8813:8814 Equiv <> e1 var
R8821:8822 Equiv <> e2 var
R8980:8983 Imp <> BNot constr
R8959:8967 Imp <> E_IfFalse constr
R8980:8983 Imp <> BNot constr
R8959:8967 Imp <> E_IfFalse constr
R9106:9109 Imp <> BNot constr
R9086:9093 Imp <> E_IfTrue constr
R9106:9109 Imp <> BNot constr
R9086:9093 Imp <> E_IfTrue constr
R9239:9247 Imp <> E_IfFalse constr
R9239:9247 Imp <> E_IfFalse constr
R9269:9281 Coq.Bool.Bool <> negb_true_iff thm
R9269:9281 Coq.Bool.Bool <> negb_true_iff thm
R9346:9353 Imp <> E_IfTrue constr
R9346:9353 Imp <> E_IfTrue constr
R9375:9388 Coq.Bool.Bool <> negb_false_iff thm
R9375:9388 Coq.Bool.Bool <> negb_false_iff thm
prf 9763:9773 <> WHILE_false
R9818:9823 Equiv <> cequiv def
R9858:9861 Imp <> ::'SKIP' not
R9833:9838 Imp <> ::'WHILE'_x_'DO'_x_'END' not
R9840:9843 Imp <> ::'WHILE'_x_'DO'_x_'END' not
R9845:9848 Imp <> ::'WHILE'_x_'DO'_x_'END' not
R9839:9839 Equiv <> b var
R9844:9844 Equiv <> c var
R9794:9799 Equiv <> bequiv def
R9803:9808 Imp <> BFalse constr
R9801:9801 Equiv <> b var
R9979:9984 Imp <> E_Skip constr
R9979:9984 Imp <> E_Skip constr
R10097:10106 Imp <> E_WhileEnd constr
R10097:10106 Imp <> E_WhileEnd constr
prf 11435:11452 <> WHILE_true_nonterm
R11503:11505 Coq.Init.Logic <> :type_scope:'~'_x not
R11536:11537 Coq.Init.Logic <> :type_scope:'~'_x not
R11506:11506 Imp <> ::x_'/'_x_'||'_x not
R11523:11526 Imp <> ::x_'/'_x_'||'_x not
R11529:11532 Imp <> ::x_'/'_x_'||'_x not
R11507:11512 Imp <> ::'WHILE'_x_'DO'_x_'END' not
R11514:11517 Imp <> ::'WHILE'_x_'DO'_x_'END' not
R11519:11522 Imp <> ::'WHILE'_x_'DO'_x_'END' not
R11513:11513 Equiv <> b var
R11518:11518 Equiv <> c var
R11527:11528 Equiv <> st var
R11533:11535 Equiv <> st' var
R11480:11485 Equiv <> bequiv def
R11489:11493 Imp <> BTrue constr
R11487:11487 Equiv <> b var
R11620:11625 Imp <> ::'WHILE'_x_'DO'_x_'END' not
R11627:11630 Imp <> ::'WHILE'_x_'DO'_x_'END' not
R11632:11635 Imp <> ::'WHILE'_x_'DO'_x_'END' not
R11620:11625 Imp <> ::'WHILE'_x_'DO'_x_'END' not
R11627:11630 Imp <> ::'WHILE'_x_'DO'_x_'END' not
R11632:11635 Imp <> ::'WHILE'_x_'DO'_x_'END' not
R11937:11942 Equiv <> bequiv def
prf 12457:12466 <> WHILE_true
R12510:12515 Equiv <> cequiv def
R12552:12557 Imp <> ::'WHILE'_x_'DO'_x_'END' not
R12563:12566 Imp <> ::'WHILE'_x_'DO'_x_'END' not
R12571:12574 Imp <> ::'WHILE'_x_'DO'_x_'END' not
R12558:12562 Imp <> BTrue constr
R12567:12570 Imp <> ::'SKIP' not
R12526:12531 Imp <> ::'WHILE'_x_'DO'_x_'END' not
R12533:12536 Imp <> ::'WHILE'_x_'DO'_x_'END' not
R12538:12541 Imp <> ::'WHILE'_x_'DO'_x_'END' not
R12532:12532 Equiv <> b var
R12537:12537 Equiv <> c var
R12486:12491 Equiv <> bequiv def
R12495:12499 Imp <> BTrue constr
R12493:12493 Equiv <> b var
R12618:12620 Coq.Init.Logic <> :type_scope:'~'_x not
R12651:12652 Coq.Init.Logic <> :type_scope:'~'_x not
R12621:12621 Imp <> ::x_'/'_x_'||'_x not
R12638:12641 Imp <> ::x_'/'_x_'||'_x not
R12644:12647 Imp <> ::x_'/'_x_'||'_x not
R12622:12627 Imp <> ::'WHILE'_x_'DO'_x_'END' not
R12629:12632 Imp <> ::'WHILE'_x_'DO'_x_'END' not
R12634:12637 Imp <> ::'WHILE'_x_'DO'_x_'END' not
R12618:12620 Coq.Init.Logic <> :type_scope:'~'_x not
R12651:12652 Coq.Init.Logic <> :type_scope:'~'_x not
R12621:12621 Imp <> ::x_'/'_x_'||'_x not
R12638:12641 Imp <> ::x_'/'_x_'||'_x not
R12644:12647 Imp <> ::x_'/'_x_'||'_x not
R12622:12627 Imp <> ::'WHILE'_x_'DO'_x_'END' not
R12629:12632 Imp <> ::'WHILE'_x_'DO'_x_'END' not
R12634:12637 Imp <> ::'WHILE'_x_'DO'_x_'END' not
R12662:12679 Equiv <> WHILE_true_nonterm thm
R12662:12679 Equiv <> WHILE_true_nonterm thm
R12701:12703 Coq.Init.Logic <> not def
R12752:12754 Coq.Init.Logic <> :type_scope:'~'_x not
R12755:12755 Imp <> ::x_'/'_x_'||'_x not
R12779:12782 Imp <> ::x_'/'_x_'||'_x not
R12785:12788 Imp <> ::x_'/'_x_'||'_x not
R12756:12761 Imp <> ::'WHILE'_x_'DO'_x_'END' not
R12767:12770 Imp <> ::'WHILE'_x_'DO'_x_'END' not
R12775:12778 Imp <> ::'WHILE'_x_'DO'_x_'END' not
R12762:12766 Imp <> BTrue constr
R12771:12774 Imp <> ::'SKIP' not
R12752:12754 Coq.Init.Logic <> :type_scope:'~'_x not
R12755:12755 Imp <> ::x_'/'_x_'||'_x not
R12779:12782 Imp <> ::x_'/'_x_'||'_x not
R12785:12788 Imp <> ::x_'/'_x_'||'_x not
R12756:12761 Imp <> ::'WHILE'_x_'DO'_x_'END' not
R12767:12770 Imp <> ::'WHILE'_x_'DO'_x_'END' not
R12775:12778 Imp <> ::'WHILE'_x_'DO'_x_'END' not
R12762:12766 Imp <> BTrue constr
R12771:12774 Imp <> ::'SKIP' not
R12801:12818 Equiv <> WHILE_true_nonterm thm
R12801:12818 Equiv <> WHILE_true_nonterm thm
R12828:12833 Equiv <> bequiv def
R12863:12865 Coq.Init.Logic <> not def
prf 12928:12941 <> loop_unrolling
R12958:12963 Equiv <> cequiv def
R12993:12996 Imp <> ::'IFB'_x_'THEN'_x_'ELSE'_x_'FI' not
R12998:13004 Imp <> ::'IFB'_x_'THEN'_x_'ELSE'_x_'FI' not
R13024:13030 Imp <> ::'IFB'_x_'THEN'_x_'ELSE'_x_'FI' not
R13035:13037 Imp <> ::'IFB'_x_'THEN'_x_'ELSE'_x_'FI' not
R12997:12997 Equiv <> b var
R13006:13007 Imp <> ::x_';'_x not
R13005:13005 Equiv <> c var
R13008:13013 Imp <> ::'WHILE'_x_'DO'_x_'END' not
R13015:13018 Imp <> ::'WHILE'_x_'DO'_x_'END' not
R13020:13023 Imp <> ::'WHILE'_x_'DO'_x_'END' not
R13014:13014 Equiv <> b var
R13019:13019 Equiv <> c var
R13031:13034 Imp <> ::'SKIP' not
R12970:12975 Imp <> ::'WHILE'_x_'DO'_x_'END' not
R12977:12980 Imp <> ::'WHILE'_x_'DO'_x_'END' not
R12982:12985 Imp <> ::'WHILE'_x_'DO'_x_'END' not
R12976:12976 Equiv <> b var
R12981:12981 Equiv <> c var
R13197:13205 Imp <> E_IfFalse constr
R13197:13205 Imp <> E_IfFalse constr
R13226:13231 Imp <> E_Skip constr
R13226:13231 Imp <> E_Skip constr
R13269:13276 Imp <> E_IfTrue constr
R13269:13276 Imp <> E_IfTrue constr
R13303:13307 Imp <> E_Seq constr
R13303:13307 Imp <> E_Seq constr
R13454:13464 Imp <> E_WhileLoop constr
R13454:13464 Imp <> E_WhileLoop constr
R13592:13601 Imp <> E_WhileEnd constr
R13592:13601 Imp <> E_WhileEnd constr
prf 13683:13691 <> seq_assoc
R13714:13719 Equiv <> cequiv def
R13737:13738 Imp <> ::x_';'_x not
R13744:13744 Imp <> ::x_';'_x not
R13735:13736 Equiv <> c1 var
R13741:13741 Imp <> ::x_';'_x not
R13739:13740 Equiv <> c2 var
R13742:13743 Equiv <> c3 var
R13722:13722 Imp <> ::x_';'_x not
R13728:13729 Imp <> ::x_';'_x not
R13725:13725 Imp <> ::x_';'_x not
R13723:13724 Equiv <> c1 var
R13726:13727 Equiv <> c2 var
R13730:13731 Equiv <> c3 var
prf 14097:14125 <> identity_assignment_first_try
R14139:14140 SfLib <> id ind
R14146:14151 Equiv <> cequiv def
R14167:14170 Imp <> ::'SKIP' not
R14155:14159 Imp <> ::x_'::='_x not
R14154:14154 Equiv <> X var
R14160:14162 Imp <> AId constr
R14164:14164 Equiv <> X var
R14276:14281 Imp <> update def
R14276:14281 Imp <> update def
ax 16304:16328 <> functional_extensionality
R16363:16363 Equiv <> Y var
R16358:16358 Equiv <> X var
R16403:16405 Coq.Init.Logic <> :type_scope:x_'='_x not
R16402:16402 Equiv <> f var
R16406:16406 Equiv <> g var
R16383:16383 Equiv <> X var
R16390:16392 Coq.Init.Logic <> :type_scope:x_'='_x not
R16387:16387 Equiv <> f var
R16389:16389 Equiv <> x var
R16393:16393 Equiv <> g var
R16395:16395 Equiv <> x var
prf 16689:16707 <> identity_assignment
R16721:16722 SfLib <> id ind
R16728:16733 Equiv <> cequiv def
R16757:16760 Imp <> ::'SKIP' not
R16741:16745 Imp <> ::x_'::='_x not
R16740:16740 Equiv <> X var
R16746:16748 Imp <> AId constr
R16750:16750 Equiv <> X var
R16865:16870 Imp <> update def
R16865:16870 Imp <> update def
R16930:16954 Equiv <> functional_extensionality prfax
R16930:16954 Equiv <> functional_extensionality prfax
R16980:16990 Imp <> update_same thm
R16980:16990 Imp <> update_same thm
R17070:17073 Coq.Init.Logic <> :type_scope:x_'='_x not
R17094:17094 Coq.Init.Logic <> :type_scope:x_'='_x not
R17074:17079 Imp <> update def
R17070:17073 Coq.Init.Logic <> :type_scope:x_'='_x not
R17094:17094 Coq.Init.Logic <> :type_scope:x_'='_x not
R17074:17079 Imp <> update def
R17114:17138 Equiv <> functional_extensionality prfax
R17114:17138 Equiv <> functional_extensionality prfax
R17167:17177 Imp <> update_same thm
R17167:17177 Imp <> update_same thm
prf 17311:17323 <> assign_aequiv
R17364:17369 Equiv <> cequiv def
R17378:17382 Imp <> ::x_'::='_x not
R17377:17377 Equiv <> X var
R17383:17383 Equiv <> e var
R17371:17374 Imp <> ::'SKIP' not
R17341:17346 Equiv <> aequiv def
R17356:17356 Equiv <> e var
R17349:17351 Imp <> AId constr
R17353:17353 Equiv <> X var
R17426:17431 Equiv <> aequiv def
R17471:17476 Imp <> update def
R17485:17489 Imp <> aeval def
R17471:17476 Imp <> update def
R17485:17489 Imp <> aeval def
R17558:17582 Equiv <> functional_extensionality prfax
R17558:17582 Equiv <> functional_extensionality prfax
R17598:17608 Imp <> update_same thm
R17598:17608 Imp <> update_same thm
R17667:17672 Imp <> update def
R17680:17684 Imp <> aeval def
R17667:17672 Imp <> update def
R17680:17684 Imp <> aeval def
R17723:17747 Equiv <> functional_extensionality prfax
R17723:17747 Equiv <> functional_extensionality prfax
R17767:17777 Imp <> update_same thm
R17767:17777 Imp <> update_same thm
prf 18356:18366 <> refl_aequiv
R18382:18385 Imp <> aexp ind
R18389:18394 Equiv <> aequiv def
R18398:18398 Equiv <> a var
R18396:18396 Equiv <> a var
prf 18449:18458 <> sym_aequiv
R18478:18481 Imp <> aexp ind
R18504:18509 Equiv <> aequiv def
R18514:18515 Equiv <> a1 var
R18511:18512 Equiv <> a2 var
R18488:18493 Equiv <> aequiv def
R18498:18499 Equiv <> a2 var
R18495:18496 Equiv <> a1 var
prf 18586:18597 <> trans_aequiv
R18620:18623 Imp <> aexp ind
R18662:18667 Equiv <> aequiv def
R18672:18673 Equiv <> a3 var
R18669:18670 Equiv <> a1 var
R18646:18651 Equiv <> aequiv def
R18656:18657 Equiv <> a3 var
R18653:18654 Equiv <> a2 var
R18630:18635 Equiv <> aequiv def
R18640:18641 Equiv <> a2 var
R18637:18638 Equiv <> a1 var
R18693:18698 Equiv <> aequiv def
prf 18793:18803 <> refl_bequiv
R18819:18822 Imp <> bexp ind
R18826:18831 Equiv <> bequiv def
R18835:18835 Equiv <> b var
R18833:18833 Equiv <> b var
R18854:18859 Equiv <> bequiv def
prf 18901:18910 <> sym_bequiv
R18930:18933 Imp <> bexp ind
R18956:18961 Equiv <> bequiv def
R18966:18967 Equiv <> b1 var
R18963:18964 Equiv <> b2 var
R18940:18945 Equiv <> bequiv def
R18950:18951 Equiv <> b2 var
R18947:18948 Equiv <> b1 var
R18986:18991 Equiv <> bequiv def
prf 19053:19064 <> trans_bequiv
R19087:19090 Imp <> bexp ind
R19129:19134 Equiv <> bequiv def
R19139:19140 Equiv <> b3 var
R19136:19137 Equiv <> b1 var
R19113:19118 Equiv <> bequiv def
R19123:19124 Equiv <> b3 var
R19120:19121 Equiv <> b2 var
R19097:19102 Equiv <> bequiv def
R19107:19108 Equiv <> b2 var
R19104:19105 Equiv <> b1 var
R19160:19165 Equiv <> bequiv def
prf 19260:19270 <> refl_cequiv
R19286:19288 Imp <> com ind
R19292:19297 Equiv <> cequiv def
R19301:19301 Equiv <> c var
R19299:19299 Equiv <> c var
R19320:19325 Equiv <> cequiv def
R19351:19358 Coq.Init.Logic <> iff_refl thm
R19351:19358 Coq.Init.Logic <> iff_refl thm
prf 19374:19383 <> sym_cequiv
R19403:19405 Imp <> com ind
R19428:19433 Equiv <> cequiv def
R19438:19439 Equiv <> c1 var
R19435:19436 Equiv <> c2 var
R19412:19417 Equiv <> cequiv def
R19422:19423 Equiv <> c2 var
R19419:19420 Equiv <> c1 var
R19458:19463 Equiv <> cequiv def
R19513:19517 Coq.Init.Logic <> :type_scope:x_'<->'_x not
R19501:19503 Imp <> ::x_'/'_x_'||'_x not
R19506:19509 Imp <> ::x_'/'_x_'||'_x not
R19520:19522 Imp <> ::x_'/'_x_'||'_x not
R19525:19528 Imp <> ::x_'/'_x_'||'_x not
R19513:19517 Coq.Init.Logic <> :type_scope:x_'<->'_x not
R19501:19503 Imp <> ::x_'/'_x_'||'_x not
R19506:19509 Imp <> ::x_'/'_x_'||'_x not
R19520:19522 Imp <> ::x_'/'_x_'||'_x not
R19525:19528 Imp <> ::x_'/'_x_'||'_x not
R19591:19597 Coq.Init.Logic <> iff_sym thm
R19591:19597 Coq.Init.Logic <> iff_sym thm
prf 19624:19632 <> iff_trans
R19698:19702 Coq.Init.Logic <> :type_scope:x_'<->'_x not
R19696:19697 Equiv <> P1 var
R19703:19704 Equiv <> P3 var
R19683:19687 Coq.Init.Logic <> :type_scope:x_'<->'_x not
R19681:19682 Equiv <> P2 var
R19688:19689 Equiv <> P3 var
R19668:19672 Coq.Init.Logic <> :type_scope:x_'<->'_x not
R19666:19667 Equiv <> P1 var
R19673:19674 Equiv <> P2 var
prf 19872:19883 <> trans_cequiv
R19906:19908 Imp <> com ind
R19947:19952 Equiv <> cequiv def
R19957:19958 Equiv <> c3 var
R19954:19955 Equiv <> c1 var
R19931:19936 Equiv <> cequiv def
R19941:19942 Equiv <> c3 var
R19938:19939 Equiv <> c2 var
R19915:19920 Equiv <> cequiv def
R19925:19926 Equiv <> c2 var
R19922:19923 Equiv <> c1 var
R19978:19983 Equiv <> cequiv def
R20044:20046 Imp <> ::x_'/'_x_'||'_x not
R20049:20052 Imp <> ::x_'/'_x_'||'_x not
R20026:20034 Equiv <> iff_trans thm
R20044:20046 Imp <> ::x_'/'_x_'||'_x not
R20049:20052 Imp <> ::x_'/'_x_'||'_x not
R20026:20034 Equiv <> iff_trans thm
prf 21409:21423 <> CAss_congruence
R21465:21470 Equiv <> cequiv def
R21485:21488 Imp <> CAss constr
R21492:21494 Equiv <> a1' var
R21490:21490 Equiv <> i var
R21473:21476 Imp <> CAss constr
R21480:21481 Equiv <> a1 var
R21478:21478 Equiv <> i var
R21446:21451 Equiv <> aequiv def
R21456:21458 Equiv <> a1' var
R21453:21454 Equiv <> a1 var
R21607:21611 Imp <> E_Ass constr
R21607:21611 Imp <> E_Ass constr
R21694:21698 Imp <> E_Ass constr
R21694:21698 Imp <> E_Ass constr
prf 23552:23568 <> CWhile_congruence
R23632:23637 Equiv <> cequiv def
R23661:23666 Imp <> ::'WHILE'_x_'DO'_x_'END' not
R23670:23673 Imp <> ::'WHILE'_x_'DO'_x_'END' not
R23677:23680 Imp <> ::'WHILE'_x_'DO'_x_'END' not
R23667:23669 Equiv <> b1' var
R23674:23676 Equiv <> c1' var
R23640:23645 Imp <> ::'WHILE'_x_'DO'_x_'END' not
R23648:23651 Imp <> ::'WHILE'_x_'DO'_x_'END' not
R23654:23657 Imp <> ::'WHILE'_x_'DO'_x_'END' not
R23646:23647 Equiv <> b1 var
R23652:23653 Equiv <> c1 var
R23613:23618 Equiv <> cequiv def
R23623:23625 Equiv <> c1' var
R23620:23621 Equiv <> c1 var
R23596:23601 Equiv <> bequiv def
R23606:23608 Equiv <> b1' var
R23603:23604 Equiv <> b1 var
R23724:23729 Equiv <> bequiv def
R23731:23736 Equiv <> cequiv def
R23828:23833 Imp <> ::'WHILE'_x_'DO'_x_'END' not
R23836:23839 Imp <> ::'WHILE'_x_'DO'_x_'END' not
R23842:23845 Imp <> ::'WHILE'_x_'DO'_x_'END' not
R23828:23833 Imp <> ::'WHILE'_x_'DO'_x_'END' not
R23836:23839 Imp <> ::'WHILE'_x_'DO'_x_'END' not
R23842:23845 Imp <> ::'WHILE'_x_'DO'_x_'END' not
R23942:23951 Imp <> E_WhileEnd constr
R23942:23951 Imp <> E_WhileEnd constr
R24017:24027 Imp <> E_WhileLoop constr
R24017:24027 Imp <> E_WhileLoop constr
R24284:24289 Imp <> ::'WHILE'_x_'DO'_x_'END' not
R24293:24296 Imp <> ::'WHILE'_x_'DO'_x_'END' not
R24300:24303 Imp <> ::'WHILE'_x_'DO'_x_'END' not
R24284:24289 Imp <> ::'WHILE'_x_'DO'_x_'END' not
R24293:24296 Imp <> ::'WHILE'_x_'DO'_x_'END' not
R24300:24303 Imp <> ::'WHILE'_x_'DO'_x_'END' not
R24402:24411 Imp <> E_WhileEnd constr
R24402:24411 Imp <> E_WhileEnd constr
R24477:24487 Imp <> E_WhileLoop constr
R24477:24487 Imp <> E_WhileLoop constr
prf 24790:24804 <> CSeq_congruence
R24868:24873 Equiv <> cequiv def
R24887:24887 Imp <> ::x_';'_x not
R24884:24886 Equiv <> c1' var
R24888:24890 Equiv <> c2' var
R24878:24878 Imp <> ::x_';'_x not
R24876:24877 Equiv <> c1 var
R24879:24880 Equiv <> c2 var
R24849:24854 Equiv <> cequiv def
R24859:24861 Equiv <> c2' var
R24856:24857 Equiv <> c2 var
R24832:24837 Equiv <> cequiv def
R24842:24844 Equiv <> c1' var
R24839:24840 Equiv <> c1 var
R24909:24914 Equiv <> cequiv def
prf 25032:25045 <> CIf_congruence
R25129:25134 Equiv <> cequiv def
R25164:25167 Imp <> ::'IFB'_x_'THEN'_x_'ELSE'_x_'FI' not
R25170:25175 Imp <> ::'IFB'_x_'THEN'_x_'ELSE'_x_'FI' not
R25179:25184 Imp <> ::'IFB'_x_'THEN'_x_'ELSE'_x_'FI' not
R25188:25190 Imp <> ::'IFB'_x_'THEN'_x_'ELSE'_x_'FI' not
R25168:25169 Equiv <> b' var
R25176:25178 Equiv <> c1' var
R25185:25187 Equiv <> c2' var
R25137:25140 Imp <> ::'IFB'_x_'THEN'_x_'ELSE'_x_'FI' not
R25142:25147 Imp <> ::'IFB'_x_'THEN'_x_'ELSE'_x_'FI' not
R25150:25155 Imp <> ::'IFB'_x_'THEN'_x_'ELSE'_x_'FI' not
R25158:25160 Imp <> ::'IFB'_x_'THEN'_x_'ELSE'_x_'FI' not
R25141:25141 Equiv <> b var
R25148:25149 Equiv <> c1 var
R25156:25157 Equiv <> c2 var
R25110:25115 Equiv <> cequiv def
R25120:25122 Equiv <> c2' var
R25117:25118 Equiv <> c2 var
R25093:25098 Equiv <> cequiv def
R25103:25105 Equiv <> c1' var
R25100:25101 Equiv <> c1 var
R25078:25083 Equiv <> bequiv def
R25087:25088 Equiv <> b' var
R25085:25085 Equiv <> b var
R25208:25213 Equiv <> bequiv def
R25216:25221 Equiv <> cequiv def
R25271:25274 Imp <> ::'IFB'_x_'THEN'_x_'ELSE'_x_'FI' not
R25276:25281 Imp <> ::'IFB'_x_'THEN'_x_'ELSE'_x_'FI' not
R25284:25289 Imp <> ::'IFB'_x_'THEN'_x_'ELSE'_x_'FI' not
R25292:25294 Imp <> ::'IFB'_x_'THEN'_x_'ELSE'_x_'FI' not
R25271:25274 Imp <> ::'IFB'_x_'THEN'_x_'ELSE'_x_'FI' not
R25276:25281 Imp <> ::'IFB'_x_'THEN'_x_'ELSE'_x_'FI' not
R25284:25289 Imp <> ::'IFB'_x_'THEN'_x_'ELSE'_x_'FI' not
R25292:25294 Imp <> ::'IFB'_x_'THEN'_x_'ELSE'_x_'FI' not
R25354:25361 Imp <> E_IfTrue constr
R25354:25361 Imp <> E_IfTrue constr
R25374:25378 Imp <> beval def
R25393:25397 Imp <> beval def
R25393:25397 Imp <> beval def
R25374:25378 Imp <> beval def
R25458:25466 Imp <> E_IfFalse constr
R25458:25466 Imp <> E_IfFalse constr
R25478:25482 Imp <> beval def
R25497:25501 Imp <> beval def
R25497:25501 Imp <> beval def
R25478:25482 Imp <> beval def
R25577:25580 Imp <> ::'IFB'_x_'THEN'_x_'ELSE'_x_'FI' not
R25583:25588 Imp <> ::'IFB'_x_'THEN'_x_'ELSE'_x_'FI' not
R25592:25597 Imp <> ::'IFB'_x_'THEN'_x_'ELSE'_x_'FI' not
R25601:25603 Imp <> ::'IFB'_x_'THEN'_x_'ELSE'_x_'FI' not
R25577:25580 Imp <> ::'IFB'_x_'THEN'_x_'ELSE'_x_'FI' not
R25583:25588 Imp <> ::'IFB'_x_'THEN'_x_'ELSE'_x_'FI' not
R25592:25597 Imp <> ::'IFB'_x_'THEN'_x_'ELSE'_x_'FI' not
R25601:25603 Imp <> ::'IFB'_x_'THEN'_x_'ELSE'_x_'FI' not
R25663:25670 Imp <> E_IfTrue constr
R25663:25670 Imp <> E_IfTrue constr
R25683:25687 Imp <> beval def
R25701:25705 Imp <> beval def
R25701:25705 Imp <> beval def
R25683:25687 Imp <> beval def
R25777:25785 Imp <> E_IfFalse constr
R25777:25785 Imp <> E_IfFalse constr
R25797:25801 Imp <> beval def
R25815:25819 Imp <> beval def
R25815:25819 Imp <> beval def
R25797:25801 Imp <> beval def
def 26002:26019 <> congruence_example
R26024:26029 Equiv <> cequiv def
R26211:26217 Imp <> ::x_';'_x not
R26200:26204 Imp <> ::x_'::='_x not
R26199:26199 Imp <> X def
R26205:26208 Imp <> ANum constr
R26218:26222 Imp <> ::'IFB'_x_'THEN'_x_'ELSE'_x_'FI' not
R26243:26261 Imp <> ::'IFB'_x_'THEN'_x_'ELSE'_x_'FI' not
R26290:26333 Imp <> ::'IFB'_x_'THEN'_x_'ELSE'_x_'FI' not
R26347:26354 Imp <> ::'IFB'_x_'THEN'_x_'ELSE'_x_'FI' not
R26223:26225 Imp <> BEq constr
R26236:26239 Imp <> ANum constr
R26228:26230 Imp <> AId constr
R26232:26232 Imp <> X def
R26263:26267 Imp <> ::x_'::='_x not
R26262:26262 Imp <> Y def
R26268:26273 Imp <> AMinus constr
R26284:26286 Imp <> AId constr
R26288:26288 Imp <> X def
R26276:26278 Imp <> AId constr
R26280:26280 Imp <> X def
R26335:26339 Imp <> ::x_'::='_x not
R26334:26334 Imp <> Y def
R26340:26343 Imp <> ANum constr
R26069:26075 Imp <> ::x_';'_x not
R26058:26062 Imp <> ::x_'::='_x not
R26057:26057 Imp <> X def
R26063:26066 Imp <> ANum constr
R26076:26080 Imp <> ::'IFB'_x_'THEN'_x_'ELSE'_x_'FI' not
R26101:26119 Imp <> ::'IFB'_x_'THEN'_x_'ELSE'_x_'FI' not
R26132:26149 Imp <> ::'IFB'_x_'THEN'_x_'ELSE'_x_'FI' not
R26163:26170 Imp <> ::'IFB'_x_'THEN'_x_'ELSE'_x_'FI' not
R26081:26083 Imp <> BEq constr
R26094:26097 Imp <> ANum constr
R26086:26088 Imp <> AId constr
R26090:26090 Imp <> X def
R26121:26125 Imp <> ::x_'::='_x not
R26120:26120 Imp <> Y def
R26126:26129 Imp <> ANum constr
R26151:26155 Imp <> ::x_'::='_x not
R26150:26150 Imp <> Y def
R26156:26159 Imp <> ANum constr
R26373:26387 Equiv <> CSeq_congruence prfax
R26373:26387 Equiv <> CSeq_congruence prfax
R26401:26411 Equiv <> refl_cequiv thm
R26401:26411 Equiv <> refl_cequiv thm
R26425:26438 Equiv <> CIf_congruence thm
R26425:26438 Equiv <> CIf_congruence thm
R26453:26463 Equiv <> refl_bequiv thm
R26453:26463 Equiv <> refl_bequiv thm
R26478:26492 Equiv <> CAss_congruence thm
R26478:26492 Equiv <> CAss_congruence thm
R26502:26507 Equiv <> aequiv def
R26542:26551 Coq.Arith.Minus <> minus_diag thm
R26542:26551 Coq.Arith.Minus <> minus_diag thm
R26566:26576 Equiv <> refl_cequiv thm
R26566:26576 Equiv <> refl_cequiv thm
def 27254:27265 <> atrans_sound
R27285:27288 Imp <> aexp ind
R27277:27280 Imp <> aexp ind
R27315:27318 Imp <> aexp ind
R27326:27331 Equiv <> aequiv def
R27336:27341 Equiv <> atrans var
R27343:27343 Equiv <> a var
R27333:27333 Equiv <> a var
def 27359:27370 <> btrans_sound
R27390:27393 Imp <> bexp ind
R27382:27385 Imp <> bexp ind
R27420:27423 Imp <> bexp ind
R27431:27436 Equiv <> bequiv def
R27441:27446 Equiv <> btrans var
R27448:27448 Equiv <> b var
R27438:27438 Equiv <> b var
def 27464:27475 <> ctrans_sound
R27494:27496 Imp <> com ind
R27487:27489 Imp <> com ind
R27523:27525 Imp <> com ind
R27533:27538 Equiv <> cequiv def
R27543:27548 Equiv <> ctrans var
R27550:27550 Equiv <> c var
R27540:27540 Equiv <> c var
def 27868:27886 <> fold_constants_aexp
R27893:27896 Imp <> aexp ind
R27901:27904 Imp <> aexp ind
R27917:27917 Equiv <> a var
R27928:27931 Imp <> ANum constr
R27944:27947 Imp <> ANum constr
R27955:27957 Imp <> AId constr
R27971:27973 Imp <> AId constr
R27981:27985 Imp <> APlus constr
R28010:28010 Coq.Init.Datatypes <> :core_scope:'('_x_','_x_','_'..'_','_x_')' not
R28033:28034 Coq.Init.Datatypes <> :core_scope:'('_x_','_x_','_'..'_','_x_')' not
R28057:28057 Coq.Init.Datatypes <> :core_scope:'('_x_','_x_','_'..'_','_x_')' not
R28011:28029 Equiv <> fold_constants_aexp def
R28035:28053 Equiv <> fold_constants_aexp def
R28072:28072 Coq.Init.Datatypes <> :core_scope:'('_x_','_x_','_'..'_','_x_')' not
R28080:28081 Coq.Init.Datatypes <> :core_scope:'('_x_','_x_','_'..'_','_x_')' not
R28089:28089 Coq.Init.Datatypes <> :core_scope:'('_x_','_x_','_'..'_','_x_')' not
R28073:28076 Imp <> ANum constr
R28082:28085 Imp <> ANum constr
R28094:28097 Imp <> ANum constr
R28102:28104 Coq.Init.Peano <> :nat_scope:x_'+'_x not
R28117:28117 Coq.Init.Datatypes <> :core_scope:'('_x_','_x_','_'..'_','_x_')' not
R28121:28122 Coq.Init.Datatypes <> :core_scope:'('_x_','_x_','_'..'_','_x_')' not
R28126:28126 Coq.Init.Datatypes <> :core_scope:'('_x_','_x_','_'..'_','_x_')' not
R28131:28135 Imp <> APlus constr
R28159:28164 Imp <> AMinus constr
R28188:28188 Coq.Init.Datatypes <> :core_scope:'('_x_','_x_','_'..'_','_x_')' not
R28211:28212 Coq.Init.Datatypes <> :core_scope:'('_x_','_x_','_'..'_','_x_')' not
R28235:28235 Coq.Init.Datatypes <> :core_scope:'('_x_','_x_','_'..'_','_x_')' not
R28189:28207 Equiv <> fold_constants_aexp def
R28213:28231 Equiv <> fold_constants_aexp def
R28250:28250 Coq.Init.Datatypes <> :core_scope:'('_x_','_x_','_'..'_','_x_')' not
R28258:28259 Coq.Init.Datatypes <> :core_scope:'('_x_','_x_','_'..'_','_x_')' not
R28267:28267 Coq.Init.Datatypes <> :core_scope:'('_x_','_x_','_'..'_','_x_')' not
R28251:28254 Imp <> ANum constr
R28260:28263 Imp <> ANum constr
R28272:28275 Imp <> ANum constr
R28280:28282 Coq.Init.Peano <> :nat_scope:x_'-'_x not
R28295:28295 Coq.Init.Datatypes <> :core_scope:'('_x_','_x_','_'..'_','_x_')' not
R28299:28300 Coq.Init.Datatypes <> :core_scope:'('_x_','_x_','_'..'_','_x_')' not
R28304:28304 Coq.Init.Datatypes <> :core_scope:'('_x_','_x_','_'..'_','_x_')' not
R28309:28314 Imp <> AMinus constr
R28338:28342 Imp <> AMult constr
R28367:28367 Coq.Init.Datatypes <> :core_scope:'('_x_','_x_','_'..'_','_x_')' not
R28390:28391 Coq.Init.Datatypes <> :core_scope:'('_x_','_x_','_'..'_','_x_')' not
R28414:28414 Coq.Init.Datatypes <> :core_scope:'('_x_','_x_','_'..'_','_x_')' not
R28368:28386 Equiv <> fold_constants_aexp def
R28392:28410 Equiv <> fold_constants_aexp def
R28429:28429 Coq.Init.Datatypes <> :core_scope:'('_x_','_x_','_'..'_','_x_')' not
R28437:28438 Coq.Init.Datatypes <> :core_scope:'('_x_','_x_','_'..'_','_x_')' not
R28446:28446 Coq.Init.Datatypes <> :core_scope:'('_x_','_x_','_'..'_','_x_')' not
R28430:28433 Imp <> ANum constr
R28439:28442 Imp <> ANum constr
R28451:28454 Imp <> ANum constr
R28459:28461 Coq.Init.Peano <> :nat_scope:x_'*'_x not
R28474:28474 Coq.Init.Datatypes <> :core_scope:'('_x_','_x_','_'..'_','_x_')' not
R28478:28479 Coq.Init.Datatypes <> :core_scope:'('_x_','_x_','_'..'_','_x_')' not
R28483:28483 Coq.Init.Datatypes <> :core_scope:'('_x_','_x_','_'..'_','_x_')' not
R28488:28492 Imp <> AMult constr
def 28528:28540 <> fold_aexp_ex1
R28616:28621 Coq.Init.Logic <> :type_scope:x_'='_x not
R28548:28566 Equiv <> fold_constants_aexp def
R28576:28580 Imp <> AMult constr
R28609:28611 Imp <> AId constr
R28613:28613 Imp <> X def
R28583:28587 Imp <> APlus constr
R28599:28602 Imp <> ANum constr
R28590:28593 Imp <> ANum constr
R28622:28626 Imp <> AMult constr
R28638:28640 Imp <> AId constr
R28642:28642 Imp <> X def
R28629:28632 Imp <> ANum constr
def 28985:28997 <> fold_aexp_ex2
R29090:29094 Coq.Init.Logic <> :type_scope:x_'='_x not
R29005:29023 Equiv <> fold_constants_aexp def
R29033:29038 Imp <> AMinus constr
R29049:29053 Imp <> APlus constr
R29082:29084 Imp <> AId constr
R29086:29086 Imp <> Y def
R29056:29060 Imp <> AMult constr
R29072:29075 Imp <> ANum constr
R29063:29066 Imp <> ANum constr
R29041:29043 Imp <> AId constr
R29045:29045 Imp <> X def
R29095:29100 Imp <> AMinus constr
R29111:29115 Imp <> APlus constr
R29127:29129 Imp <> AId constr
R29131:29131 Imp <> Y def
R29118:29121 Imp <> ANum constr
R29103:29105 Imp <> AId constr
R29107:29107 Imp <> X def
def 29347:29365 <> fold_constants_bexp
R29372:29375 Imp <> bexp ind
R29380:29383 Imp <> bexp ind
R29396:29396 Equiv <> b var
R29407:29411 Imp <> BTrue constr
R29423:29427 Imp <> BTrue constr
R29433:29438 Imp <> BFalse constr
R29449:29454 Imp <> BFalse constr
R29460:29462 Imp <> BEq constr
R29487:29487 Coq.Init.Datatypes <> :core_scope:'('_x_','_x_','_'..'_','_x_')' not
R29510:29511 Coq.Init.Datatypes <> :core_scope:'('_x_','_x_','_'..'_','_x_')' not
R29534:29534 Coq.Init.Datatypes <> :core_scope:'('_x_','_x_','_'..'_','_x_')' not
R29488:29506 Equiv <> fold_constants_aexp def
R29512:29530 Equiv <> fold_constants_aexp def
R29549:29549 Coq.Init.Datatypes <> :core_scope:'('_x_','_x_','_'..'_','_x_')' not
R29557:29558 Coq.Init.Datatypes <> :core_scope:'('_x_','_x_','_'..'_','_x_')' not
R29566:29566 Coq.Init.Datatypes <> :core_scope:'('_x_','_x_','_'..'_','_x_')' not
R29550:29553 Imp <> ANum constr
R29559:29562 Imp <> ANum constr
R29574:29580 Coq.Arith.EqNat <> beq_nat def
R29604:29609 Imp <> BFalse constr
R29593:29597 Imp <> BTrue constr
R29619:29619 Coq.Init.Datatypes <> :core_scope:'('_x_','_x_','_'..'_','_x_')' not
R29623:29624 Coq.Init.Datatypes <> :core_scope:'('_x_','_x_','_'..'_','_x_')' not
R29628:29628 Coq.Init.Datatypes <> :core_scope:'('_x_','_x_','_'..'_','_x_')' not
R29633:29635 Imp <> BEq constr
R29659:29661 Imp <> BLe constr
R29686:29686 Coq.Init.Datatypes <> :core_scope:'('_x_','_x_','_'..'_','_x_')' not
R29709:29710 Coq.Init.Datatypes <> :core_scope:'('_x_','_x_','_'..'_','_x_')' not
R29733:29733 Coq.Init.Datatypes <> :core_scope:'('_x_','_x_','_'..'_','_x_')' not
R29687:29705 Equiv <> fold_constants_aexp def
R29711:29729 Equiv <> fold_constants_aexp def
R29748:29748 Coq.Init.Datatypes <> :core_scope:'('_x_','_x_','_'..'_','_x_')' not
R29756:29757 Coq.Init.Datatypes <> :core_scope:'('_x_','_x_','_'..'_','_x_')' not
R29765:29765 Coq.Init.Datatypes <> :core_scope:'('_x_','_x_','_'..'_','_x_')' not
R29749:29752 Imp <> ANum constr
R29758:29761 Imp <> ANum constr
R29773:29779 SfLib <> ble_nat def
R29803:29808 Imp <> BFalse constr
R29792:29796 Imp <> BTrue constr
R29818:29818 Coq.Init.Datatypes <> :core_scope:'('_x_','_x_','_'..'_','_x_')' not
R29822:29823 Coq.Init.Datatypes <> :core_scope:'('_x_','_x_','_'..'_','_x_')' not
R29827:29827 Coq.Init.Datatypes <> :core_scope:'('_x_','_x_','_'..'_','_x_')' not
R29832:29834 Imp <> BLe constr
R29858:29861 Imp <> BNot constr
R29884:29902 Equiv <> fold_constants_bexp def
R29921:29925 Imp <> BTrue constr
R29930:29935 Imp <> BFalse constr
R29945:29950 Imp <> BFalse constr
R29955:29959 Imp <> BTrue constr
R29976:29979 Imp <> BNot constr
R29999:30002 Imp <> BAnd constr
R30027:30027 Coq.Init.Datatypes <> :core_scope:'('_x_','_x_','_'..'_','_x_')' not
R30050:30051 Coq.Init.Datatypes <> :core_scope:'('_x_','_x_','_'..'_','_x_')' not
R30074:30074 Coq.Init.Datatypes <> :core_scope:'('_x_','_x_','_'..'_','_x_')' not
R30028:30046 Equiv <> fold_constants_bexp def
R30052:30070 Equiv <> fold_constants_bexp def
R30089:30089 Coq.Init.Datatypes <> :core_scope:'('_x_','_x_','_'..'_','_x_')' not
R30095:30096 Coq.Init.Datatypes <> :core_scope:'('_x_','_x_','_'..'_','_x_')' not
R30102:30102 Coq.Init.Datatypes <> :core_scope:'('_x_','_x_','_'..'_','_x_')' not
R30090:30094 Imp <> BTrue constr
R30097:30101 Imp <> BTrue constr
R30107:30111 Imp <> BTrue constr
R30121:30121 Coq.Init.Datatypes <> :core_scope:'('_x_','_x_','_'..'_','_x_')' not
R30127:30128 Coq.Init.Datatypes <> :core_scope:'('_x_','_x_','_'..'_','_x_')' not
R30135:30135 Coq.Init.Datatypes <> :core_scope:'('_x_','_x_','_'..'_','_x_')' not
R30122:30126 Imp <> BTrue constr
R30129:30134 Imp <> BFalse constr
R30140:30145 Imp <> BFalse constr
R30155:30155 Coq.Init.Datatypes <> :core_scope:'('_x_','_x_','_'..'_','_x_')' not
R30162:30163 Coq.Init.Datatypes <> :core_scope:'('_x_','_x_','_'..'_','_x_')' not
R30169:30169 Coq.Init.Datatypes <> :core_scope:'('_x_','_x_','_'..'_','_x_')' not
R30156:30161 Imp <> BFalse constr
R30164:30168 Imp <> BTrue constr
R30174:30179 Imp <> BFalse constr
R30189:30189 Coq.Init.Datatypes <> :core_scope:'('_x_','_x_','_'..'_','_x_')' not
R30196:30197 Coq.Init.Datatypes <> :core_scope:'('_x_','_x_','_'..'_','_x_')' not
R30204:30204 Coq.Init.Datatypes <> :core_scope:'('_x_','_x_','_'..'_','_x_')' not
R30190:30195 Imp <> BFalse constr
R30198:30203 Imp <> BFalse constr
R30209:30214 Imp <> BFalse constr
R30224:30224 Coq.Init.Datatypes <> :core_scope:'('_x_','_x_','_'..'_','_x_')' not
R30228:30229 Coq.Init.Datatypes <> :core_scope:'('_x_','_x_','_'..'_','_x_')' not
R30233:30233 Coq.Init.Datatypes <> :core_scope:'('_x_','_x_','_'..'_','_x_')' not
R30238:30241 Imp <> BAnd constr
def 30277:30289 <> fold_bexp_ex1
R30356:30360 Coq.Init.Logic <> :type_scope:x_'='_x not
R30297:30315 Equiv <> fold_constants_bexp def
R30318:30321 Imp <> BAnd constr
R30330:30333 Imp <> BNot constr
R30336:30339 Imp <> BAnd constr
R30348:30352 Imp <> BTrue constr
R30341:30346 Imp <> BFalse constr
R30323:30327 Imp <> BTrue constr
R30361:30365 Imp <> BTrue constr
def 30402:30414 <> fold_bexp_ex2
R30567:30571 Coq.Init.Logic <> :type_scope:x_'='_x not
R30422:30440 Equiv <> fold_constants_bexp def
R30450:30453 Imp <> BAnd constr
R30491:30493 Imp <> BEq constr
R30523:30528 Imp <> AMinus constr
R30540:30544 Imp <> APlus constr
R30556:30559 Imp <> ANum constr
R30547:30550 Imp <> ANum constr
R30531:30534 Imp <> ANum constr
R30496:30499 Imp <> ANum constr
R30456:30458 Imp <> BEq constr
R30469:30471 Imp <> AId constr
R30473:30473 Imp <> Y def
R30461:30463 Imp <> AId constr
R30465:30465 Imp <> X def
R30572:30575 Imp <> BAnd constr
R30599:30603 Imp <> BTrue constr
R30578:30580 Imp <> BEq constr
R30591:30593 Imp <> AId constr
R30595:30595 Imp <> Y def
R30583:30585 Imp <> AId constr
R30587:30587 Imp <> X def
def 30757:30774 <> fold_constants_com
R30781:30783 Imp <> com ind
R30788:30790 Imp <> com ind
R30803:30803 Equiv <> c var
R30814:30817 Imp <> ::'SKIP' not
R30834:30837 Imp <> ::'SKIP' not
R30844:30848 Imp <> ::x_'::='_x not
R30862:30865 Imp <> CAss constr
R30870:30888 Equiv <> fold_constants_aexp def
R30899:30901 Imp <> ::x_';'_x not
R30916:30916 Imp <> ::x_';'_x not
R30938:30942 Imp <> ::x_';'_x not
R30964:30964 Imp <> ::x_';'_x not
R30917:30934 Equiv <> fold_constants_com def
R30943:30960 Equiv <> fold_constants_com def
R30970:30973 Imp <> ::'IFB'_x_'THEN'_x_'ELSE'_x_'FI' not
R30975:30980 Imp <> ::'IFB'_x_'THEN'_x_'ELSE'_x_'FI' not
R30983:30988 Imp <> ::'IFB'_x_'THEN'_x_'ELSE'_x_'FI' not
R30991:30993 Imp <> ::'IFB'_x_'THEN'_x_'ELSE'_x_'FI' not
R31011:31029 Equiv <> fold_constants_bexp def
R31046:31050 Imp <> BTrue constr
R31055:31072 Equiv <> fold_constants_com def
R31085:31090 Imp <> BFalse constr
R31095:31112 Equiv <> fold_constants_com def
R31131:31134 Imp <> ::'IFB'_x_'THEN'_x_'ELSE'_x_'FI' not
R31137:31142 Imp <> ::'IFB'_x_'THEN'_x_'ELSE'_x_'FI' not
R31164:31191 Imp <> ::'IFB'_x_'THEN'_x_'ELSE'_x_'FI' not
R31213:31215 Imp <> ::'IFB'_x_'THEN'_x_'ELSE'_x_'FI' not
R31143:31160 Equiv <> fold_constants_com def
R31192:31209 Equiv <> fold_constants_com def
R31231:31236 Imp <> ::'WHILE'_x_'DO'_x_'END' not
R31238:31241 Imp <> ::'WHILE'_x_'DO'_x_'END' not
R31243:31246 Imp <> ::'WHILE'_x_'DO'_x_'END' not
R31264:31282 Equiv <> fold_constants_bexp def
R31299:31303 Imp <> BTrue constr
R31308:31313 Imp <> ::'WHILE'_x_'DO'_x_'END' not
R31319:31322 Imp <> ::'WHILE'_x_'DO'_x_'END' not
R31327:31330 Imp <> ::'WHILE'_x_'DO'_x_'END' not
R31314:31318 Imp <> BTrue constr
R31323:31326 Imp <> ::'SKIP' not
R31340:31345 Imp <> BFalse constr
R31350:31353 Imp <> ::'SKIP' not
R31369:31374 Imp <> ::'WHILE'_x_'DO'_x_'END' not
R31377:31381 Imp <> ::'WHILE'_x_'DO'_x_'END' not
R31402:31406 Imp <> ::'WHILE'_x_'DO'_x_'END' not
R31382:31399 Equiv <> fold_constants_com def
R31401:31401 Equiv <> c var
def 31434:31445 <> fold_com_ex1
R31897:31937 Coq.Init.Logic <> :type_scope:x_'='_x not
R32195:32195 Coq.Init.Logic <> :type_scope:x_'='_x not
R31451:31468 Equiv <> fold_constants_com def
R31533:31539 Imp <> ::x_';'_x not
R31505:31509 Imp <> ::x_'::='_x not
R31504:31504 Imp <> X def
R31510:31514 Imp <> APlus constr
R31526:31529 Imp <> ANum constr
R31517:31520 Imp <> ANum constr
R31569:31575 Imp <> ::x_';'_x not
R31541:31545 Imp <> ::x_'::='_x not
R31540:31540 Imp <> Y def
R31546:31551 Imp <> AMinus constr
R31562:31565 Imp <> ANum constr
R31554:31556 Imp <> AId constr
R31558:31558 Imp <> X def
R31690:31696 Imp <> ::x_';'_x not
R31576:31579 Imp <> ::'IFB'_x_'THEN'_x_'ELSE'_x_'FI' not
R31634:31646 Imp <> ::'IFB'_x_'THEN'_x_'ELSE'_x_'FI' not
R31651:31669 Imp <> ::'IFB'_x_'THEN'_x_'ELSE'_x_'FI' not
R31682:31689 Imp <> ::'IFB'_x_'THEN'_x_'ELSE'_x_'FI' not
R31580:31582 Imp <> BEq constr
R31610:31614 Imp <> APlus constr
R31626:31629 Imp <> ANum constr
R31617:31620 Imp <> ANum constr
R31585:31590 Imp <> AMinus constr
R31601:31603 Imp <> AId constr
R31605:31605 Imp <> Y def
R31593:31595 Imp <> AId constr
R31597:31597 Imp <> X def
R31647:31650 Imp <> ::'SKIP' not
R31671:31675 Imp <> ::x_'::='_x not
R31670:31670 Imp <> Y def
R31676:31679 Imp <> ANum constr
R31813:31819 Imp <> ::x_';'_x not
R31697:31700 Imp <> ::'IFB'_x_'THEN'_x_'ELSE'_x_'FI' not
R31757:31769 Imp <> ::'IFB'_x_'THEN'_x_'ELSE'_x_'FI' not
R31782:31799 Imp <> ::'IFB'_x_'THEN'_x_'ELSE'_x_'FI' not
R31804:31812 Imp <> ::'IFB'_x_'THEN'_x_'ELSE'_x_'FI' not
R31701:31703 Imp <> BLe constr
R31715:31720 Imp <> AMinus constr
R31732:31736 Imp <> APlus constr
R31748:31751 Imp <> ANum constr
R31739:31742 Imp <> ANum constr
R31723:31726 Imp <> ANum constr
R31706:31709 Imp <> ANum constr
R31771:31775 Imp <> ::x_'::='_x not
R31770:31770 Imp <> Y def
R31776:31779 Imp <> ANum constr
R31800:31803 Imp <> ::'SKIP' not
R31820:31825 Imp <> ::'WHILE'_x_'DO'_x_'END' not
R31846:31857 Imp <> ::'WHILE'_x_'DO'_x_'END' not
R31886:31895 Imp <> ::'WHILE'_x_'DO'_x_'END' not
R31826:31828 Imp <> BEq constr
R31839:31842 Imp <> ANum constr
R31831:31833 Imp <> AId constr
R31835:31835 Imp <> Y def
R31859:31863 Imp <> ::x_'::='_x not
R31858:31858 Imp <> X def
R31864:31868 Imp <> APlus constr
R31879:31882 Imp <> ANum constr
R31871:31873 Imp <> AId constr
R31875:31875 Imp <> X def
R31950:31956 Imp <> ::x_';'_x not
R31939:31943 Imp <> ::x_'::='_x not
R31938:31938 Imp <> X def
R31944:31947 Imp <> ANum constr
R31986:31992 Imp <> ::x_';'_x not
R31958:31962 Imp <> ::x_'::='_x not
R31957:31957 Imp <> Y def
R31963:31968 Imp <> AMinus constr
R31979:31982 Imp <> ANum constr
R31971:31973 Imp <> AId constr
R31975:31975 Imp <> X def
R32093:32099 Imp <> ::x_';'_x not
R31993:31996 Imp <> ::'IFB'_x_'THEN'_x_'ELSE'_x_'FI' not
R32034:32046 Imp <> ::'IFB'_x_'THEN'_x_'ELSE'_x_'FI' not
R32051:32070 Imp <> ::'IFB'_x_'THEN'_x_'ELSE'_x_'FI' not
R32083:32092 Imp <> ::'IFB'_x_'THEN'_x_'ELSE'_x_'FI' not
R31997:31999 Imp <> BEq constr
R32027:32030 Imp <> ANum constr
R32002:32007 Imp <> AMinus constr
R32018:32020 Imp <> AId constr
R32022:32022 Imp <> Y def
R32010:32012 Imp <> AId constr
R32014:32014 Imp <> X def
R32047:32050 Imp <> ::'SKIP' not
R32072:32076 Imp <> ::x_'::='_x not
R32071:32071 Imp <> Y def
R32077:32080 Imp <> ANum constr
R32112:32118 Imp <> ::x_';'_x not
R32101:32105 Imp <> ::x_'::='_x not
R32100:32100 Imp <> Y def
R32106:32109 Imp <> ANum constr
R32119:32124 Imp <> ::'WHILE'_x_'DO'_x_'END' not
R32145:32156 Imp <> ::'WHILE'_x_'DO'_x_'END' not
R32185:32194 Imp <> ::'WHILE'_x_'DO'_x_'END' not
R32125:32127 Imp <> BEq constr
R32138:32141 Imp <> ANum constr
R32130:32132 Imp <> AId constr
R32134:32134 Imp <> Y def
R32158:32162 Imp <> ::x_'::='_x not
R32157:32157 Imp <> X def
R32163:32167 Imp <> APlus constr
R32178:32181 Imp <> ANum constr
R32170:32172 Imp <> AId constr
R32174:32174 Imp <> X def
prf 32445:32469 <> fold_constants_aexp_sound
R32476:32487 Equiv <> atrans_sound def
R32489:32507 Equiv <> fold_constants_aexp def
R32526:32537 Equiv <> atrans_sound def
R32557:32562 Equiv <> aequiv def
R32991:33009 Equiv <> fold_constants_aexp def
R33035:33053 Equiv <> fold_constants_aexp def
R32991:33009 Equiv <> fold_constants_aexp def
R33035:33053 Equiv <> fold_constants_aexp def
R33035:33053 Equiv <> fold_constants_aexp def
R33035:33053 Equiv <> fold_constants_aexp def
R33035:33053 Equiv <> fold_constants_aexp def
R33035:33053 Equiv <> fold_constants_aexp def
R32991:33009 Equiv <> fold_constants_aexp def
R33035:33053 Equiv <> fold_constants_aexp def
R33035:33053 Equiv <> fold_constants_aexp def
R33035:33053 Equiv <> fold_constants_aexp def
R33035:33053 Equiv <> fold_constants_aexp def
R33035:33053 Equiv <> fold_constants_aexp def
R32991:33009 Equiv <> fold_constants_aexp def
R33035:33053 Equiv <> fold_constants_aexp def
R33035:33053 Equiv <> fold_constants_aexp def
R33035:33053 Equiv <> fold_constants_aexp def
R33035:33053 Equiv <> fold_constants_aexp def
R33035:33053 Equiv <> fold_constants_aexp def
prf 36055:36079 <> fold_constants_bexp_sound
R36085:36096 Equiv <> btrans_sound def
R36098:36116 Equiv <> fold_constants_bexp def
R36135:36146 Equiv <> btrans_sound def
R36166:36171 Equiv <> bequiv def
R36682:36700 Equiv <> fold_constants_aexp def
R36682:36700 Equiv <> fold_constants_aexp def
R36729:36747 Equiv <> fold_constants_aexp def
R36729:36747 Equiv <> fold_constants_aexp def
R36774:36778 Imp <> aeval def
R36793:36797 Imp <> aeval def
R36840:36864 Equiv <> fold_constants_aexp_sound thm
R36793:36797 Imp <> aeval def
R36774:36778 Imp <> aeval def
R36840:36864 Equiv <> fold_constants_aexp_sound thm
R36894:36898 Imp <> aeval def
R36913:36917 Imp <> aeval def
R36960:36984 Equiv <> fold_constants_aexp_sound thm
R36913:36917 Imp <> aeval def
R36894:36898 Imp <> aeval def
R36960:36984 Equiv <> fold_constants_aexp_sound thm
R37175:37181 Coq.Arith.EqNat <> beq_nat def
R37175:37181 Coq.Arith.EqNat <> beq_nat def
R37285:37303 Equiv <> fold_constants_bexp def
R37285:37303 Equiv <> fold_constants_bexp def
R37406:37424 Equiv <> fold_constants_bexp def
R37406:37424 Equiv <> fold_constants_bexp def
R37453:37471 Equiv <> fold_constants_bexp def
R37453:37471 Equiv <> fold_constants_bexp def
prf 37702:37725 <> fold_constants_com_sound
R37732:37743 Equiv <> ctrans_sound def
R37745:37762 Equiv <> fold_constants_com def
R37782:37793 Equiv <> ctrans_sound def
R37867:37877 Equiv <> refl_cequiv thm
R37867:37877 Equiv <> refl_cequiv thm
R37900:37914 Equiv <> CAss_congruence thm
R37900:37914 Equiv <> CAss_congruence thm
R37923:37947 Equiv <> fold_constants_aexp_sound thm
R37923:37947 Equiv <> fold_constants_aexp_sound thm
R37968:37982 Equiv <> CSeq_congruence prfax
R37968:37982 Equiv <> CSeq_congruence prfax
R38024:38029 Equiv <> bequiv def
R38034:38052 Equiv <> fold_constants_bexp def
R38024:38029 Equiv <> bequiv def
R38034:38052 Equiv <> fold_constants_bexp def
R38096:38120 Equiv <> fold_constants_bexp_sound thm
R38096:38120 Equiv <> fold_constants_bexp_sound thm
R38137:38155 Equiv <> fold_constants_bexp def
R38137:38155 Equiv <> fold_constants_bexp def
R38343:38356 Equiv <> CIf_congruence thm
R38343:38356 Equiv <> CIf_congruence thm
R38343:38356 Equiv <> CIf_congruence thm
R38343:38356 Equiv <> CIf_congruence thm
R38343:38356 Equiv <> CIf_congruence thm
R38343:38356 Equiv <> CIf_congruence thm
R38343:38356 Equiv <> CIf_congruence thm
R38411:38422 Equiv <> trans_cequiv thm
R38411:38422 Equiv <> trans_cequiv thm
R38461:38468 Equiv <> IFB_true thm
R38461:38468 Equiv <> IFB_true thm
R38523:38534 Equiv <> trans_cequiv thm
R38523:38534 Equiv <> trans_cequiv thm
R38573:38581 Equiv <> IFB_false thm
R38573:38581 Equiv <> IFB_false thm
R38624:38629 Equiv <> bequiv def
R38634:38652 Equiv <> fold_constants_bexp def
R38624:38629 Equiv <> bequiv def
R38634:38652 Equiv <> fold_constants_bexp def
R38697:38721 Equiv <> fold_constants_bexp_sound thm
R38697:38721 Equiv <> fold_constants_bexp_sound thm
R38738:38756 Equiv <> fold_constants_bexp def
R38738:38756 Equiv <> fold_constants_bexp def
R38797:38813 Equiv <> CWhile_congruence thm
R38797:38813 Equiv <> CWhile_congruence thm
R38797:38813 Equiv <> CWhile_congruence thm
R38797:38813 Equiv <> CWhile_congruence thm
R38797:38813 Equiv <> CWhile_congruence thm
R38797:38813 Equiv <> CWhile_congruence thm
R38797:38813 Equiv <> CWhile_congruence thm
R38868:38873 Equiv <> cequiv def
R38899:38916 Equiv <> WHILE_true_nonterm thm
R38983:38993 Equiv <> refl_bequiv thm
R38899:38916 Equiv <> WHILE_true_nonterm thm
R38899:38916 Equiv <> WHILE_true_nonterm thm
R38983:38993 Equiv <> refl_bequiv thm
R38983:38993 Equiv <> refl_bequiv thm
R39034:39044 Equiv <> WHILE_false thm
R39034:39044 Equiv <> WHILE_false thm
def 41431:41440 <> subst_aexp
R41447:41448 SfLib <> id ind
R41456:41459 Imp <> aexp ind
R41467:41470 Imp <> aexp ind
R41475:41478 Imp <> aexp ind
R41491:41491 Equiv <> a var
R41502:41505 Imp <> ANum constr
R41518:41521 Imp <> ANum constr
R41529:41531 Imp <> AId constr
R41548:41553 SfLib <> beq_id def
R41555:41555 Equiv <> i var
R41572:41574 Imp <> AId constr
R41565:41565 Equiv <> u var
R41583:41587 Imp <> APlus constr
R41599:41603 Imp <> APlus constr
R41626:41635 Equiv <> subst_aexp def
R41639:41639 Equiv <> u var
R41637:41637 Equiv <> i var
R41606:41615 Equiv <> subst_aexp def
R41619:41619 Equiv <> u var
R41617:41617 Equiv <> i var
R41649:41654 Imp <> AMinus constr
R41665:41670 Imp <> AMinus constr
R41693:41702 Equiv <> subst_aexp def
R41706:41706 Equiv <> u var
R41704:41704 Equiv <> i var
R41673:41682 Equiv <> subst_aexp def
R41686:41686 Equiv <> u var
R41684:41684 Equiv <> i var
R41716:41720 Imp <> AMult constr
R41732:41736 Imp <> AMult constr
R41759:41768 Equiv <> subst_aexp def
R41772:41772 Equiv <> u var
R41770:41770 Equiv <> i var
R41739:41748 Equiv <> subst_aexp def
R41752:41752 Equiv <> u var
R41750:41750 Equiv <> i var
def 41794:41806 <> subst_aexp_ex
R41876:41881 Coq.Init.Logic <> :type_scope:x_'='_x not
R41923:41923 Coq.Init.Logic <> :type_scope:x_'='_x not
R41812:41821 Equiv <> subst_aexp def
R41854:41858 Imp <> APlus constr
R41869:41871 Imp <> AId constr
R41873:41873 Imp <> X def
R41861:41863 Imp <> AId constr
R41865:41865 Imp <> Y def
R41826:41830 Imp <> APlus constr
R41843:41846 Imp <> ANum constr
R41833:41836 Imp <> ANum constr
R41823:41823 Imp <> X def
R41882:41886 Imp <> APlus constr
R41897:41901 Imp <> APlus constr
R41914:41917 Imp <> ANum constr
R41904:41907 Imp <> ANum constr
R41889:41891 Imp <> AId constr
R41893:41893 Imp <> Y def
def 42119:42138 <> subst_equiv_property
R42165:42170 Equiv <> cequiv def
R42214:42215 Imp <> ::x_';'_x not
R42207:42211 Imp <> ::x_'::='_x not
R42205:42206 Equiv <> i1 var
R42212:42213 Equiv <> a1 var
R42218:42222 Imp <> ::x_'::='_x not
R42216:42217 Equiv <> i2 var
R42223:42232 Equiv <> subst_aexp def
R42240:42241 Equiv <> a2 var
R42237:42238 Equiv <> a1 var
R42234:42235 Equiv <> i1 var
R42182:42183 Imp <> ::x_';'_x not
R42175:42179 Imp <> ::x_'::='_x not
R42173:42174 Equiv <> i1 var
R42180:42181 Equiv <> a1 var
R42186:42190 Imp <> ::x_'::='_x not
R42184:42185 Equiv <> i2 var
R42191:42192 Equiv <> a2 var
prf 43474:43486 <> subst_inequiv
R43493:43494 Coq.Init.Logic <> :type_scope:'~'_x not
R43495:43514 Equiv <> subst_equiv_property def
R43533:43552 Equiv <> subst_equiv_property def
R43763:43777 Imp <> ::x_';'_x not
R43736:43740 Imp <> ::x_'::='_x not
R43735:43735 Imp <> X def
R43741:43745 Imp <> APlus constr
R43756:43759 Imp <> ANum constr
R43748:43750 Imp <> AId constr
R43752:43752 Imp <> X def
R43779:43783 Imp <> ::x_'::='_x not
R43778:43778 Imp <> Y def
R43784:43786 Imp <> AId constr
R43788:43788 Imp <> X def
R43763:43777 Imp <> ::x_';'_x not
R43736:43740 Imp <> ::x_'::='_x not
R43735:43735 Imp <> X def
R43741:43745 Imp <> APlus constr
R43756:43759 Imp <> ANum constr
R43748:43750 Imp <> AId constr
R43752:43752 Imp <> X def
R43779:43783 Imp <> ::x_'::='_x not
R43778:43778 Imp <> Y def
R43784:43786 Imp <> AId constr
R43788:43788 Imp <> X def
R43845:43859 Imp <> ::x_';'_x not
R43818:43822 Imp <> ::x_'::='_x not
R43817:43817 Imp <> X def
R43823:43827 Imp <> APlus constr
R43838:43841 Imp <> ANum constr
R43830:43832 Imp <> AId constr
R43834:43834 Imp <> X def
R43861:43865 Imp <> ::x_'::='_x not
R43860:43860 Imp <> Y def
R43866:43870 Imp <> APlus constr
R43881:43884 Imp <> ANum constr
R43873:43875 Imp <> AId constr
R43877:43877 Imp <> X def
R43845:43859 Imp <> ::x_';'_x not
R43818:43822 Imp <> ::x_'::='_x not
R43817:43817 Imp <> X def
R43823:43827 Imp <> APlus constr
R43838:43841 Imp <> ANum constr
R43830:43832 Imp <> AId constr
R43834:43834 Imp <> X def
R43861:43865 Imp <> ::x_'::='_x not
R43860:43860 Imp <> Y def
R43866:43870 Imp <> APlus constr
R43881:43884 Imp <> ANum constr
R43873:43875 Imp <> AId constr
R43877:43877 Imp <> X def
R43914:43919 Equiv <> cequiv def
R43914:43919 Equiv <> cequiv def
R44139:44144 Imp <> update def
R44171:44171 Imp <> Y def
R44147:44152 Imp <> update def
R44166:44166 Imp <> X def
R44154:44164 Imp <> empty_state def
R44139:44144 Imp <> update def
R44171:44171 Imp <> Y def
R44147:44152 Imp <> update def
R44166:44166 Imp <> X def
R44154:44164 Imp <> empty_state def
R44196:44201 Imp <> update def
R44228:44228 Imp <> Y def
R44204:44209 Imp <> update def
R44223:44223 Imp <> X def
R44211:44221 Imp <> empty_state def
R44196:44201 Imp <> update def
R44228:44228 Imp <> Y def
R44204:44209 Imp <> update def
R44223:44223 Imp <> X def
R44211:44221 Imp <> empty_state def
R44257:44259 Imp <> ::x_'/'_x_'||'_x not
R44271:44274 Imp <> ::x_'/'_x_'||'_x not
R44260:44270 Imp <> empty_state def
R44297:44299 Imp <> ::x_'/'_x_'||'_x not
R44311:44314 Imp <> ::x_'/'_x_'||'_x not
R44300:44310 Imp <> empty_state def
R44368:44373 Imp <> update def
R44387:44387 Imp <> X def
R44375:44385 Imp <> empty_state def
R44348:44352 Imp <> E_Seq constr
R44408:44412 Imp <> E_Ass constr
R44257:44259 Imp <> ::x_'/'_x_'||'_x not
R44271:44274 Imp <> ::x_'/'_x_'||'_x not
R44260:44270 Imp <> empty_state def
R44297:44299 Imp <> ::x_'/'_x_'||'_x not
R44311:44314 Imp <> ::x_'/'_x_'||'_x not
R44300:44310 Imp <> empty_state def
R44297:44299 Imp <> ::x_'/'_x_'||'_x not
R44311:44314 Imp <> ::x_'/'_x_'||'_x not
R44300:44310 Imp <> empty_state def
R44368:44373 Imp <> update def
R44387:44387 Imp <> X def
R44375:44385 Imp <> empty_state def
R44348:44352 Imp <> E_Seq constr
R44408:44412 Imp <> E_Ass constr
R44408:44412 Imp <> E_Ass constr
R44368:44373 Imp <> update def
R44387:44387 Imp <> X def
R44375:44385 Imp <> empty_state def
R44348:44352 Imp <> E_Seq constr
R44408:44412 Imp <> E_Ass constr
R44408:44412 Imp <> E_Ass constr
R44368:44373 Imp <> update def
R44387:44387 Imp <> X def
R44375:44385 Imp <> empty_state def
R44348:44352 Imp <> E_Seq constr
R44408:44412 Imp <> E_Ass constr
R44408:44412 Imp <> E_Ass constr
R44368:44373 Imp <> update def
R44387:44387 Imp <> X def
R44375:44385 Imp <> empty_state def
R44348:44352 Imp <> E_Seq constr
R44567:44569 Coq.Init.Logic <> :type_scope:x_'='_x not
R44590:44608 Imp <> ceval_deterministic thm
R44613:44623 Imp <> empty_state def
R44567:44569 Coq.Init.Logic <> :type_scope:x_'='_x not
R44590:44608 Imp <> ceval_deterministic thm
R44613:44623 Imp <> empty_state def
R44665:44667 Coq.Init.Logic <> :type_scope:x_'='_x not
R44664:44664 Imp <> Y def
R44672:44672 Imp <> Y def
R44665:44667 Coq.Init.Logic <> :type_scope:x_'='_x not
R44664:44664 Imp <> Y def
R44672:44672 Imp <> Y def
ind 45079:45098 <> var_not_used_in_aexp
constr 45129:45134 <> VNUNum
constr 45183:45187 <> VNUId
constr 45245:45251 <> VNUPlus
constr 45386:45393 <> VNUMinus
constr 45529:45535 <> VNUMult
R45103:45104 SfLib <> id ind
R45109:45112 Imp <> aexp ind
R45147:45166 Equiv <> var_not_used_in_aexp ind
R45171:45174 Imp <> ANum constr
R45176:45176 Equiv <> n var
R45210:45229 Equiv <> var_not_used_in_aexp ind
R45234:45236 Imp <> AId constr
R45238:45238 Equiv <> Y var
R45201:45204 Coq.Init.Logic <> :type_scope:x_'<>'_x not
R45205:45205 Equiv <> Y var
R45345:45364 Equiv <> var_not_used_in_aexp ind
R45369:45373 Imp <> APlus constr
R45378:45379 Equiv <> a2 var
R45375:45376 Equiv <> a1 var
R45310:45329 Equiv <> var_not_used_in_aexp ind
R45333:45334 Equiv <> a2 var
R45275:45294 Equiv <> var_not_used_in_aexp ind
R45298:45299 Equiv <> a1 var
R45487:45506 Equiv <> var_not_used_in_aexp ind
R45511:45516 Imp <> AMinus constr
R45521:45522 Equiv <> a2 var
R45518:45519 Equiv <> a1 var
R45452:45471 Equiv <> var_not_used_in_aexp ind
R45475:45476 Equiv <> a2 var
R45417:45436 Equiv <> var_not_used_in_aexp ind
R45440:45441 Equiv <> a1 var
R45629:45648 Equiv <> var_not_used_in_aexp ind
R45653:45657 Imp <> AMult constr
R45662:45663 Equiv <> a2 var
R45659:45660 Equiv <> a1 var
R45594:45613 Equiv <> var_not_used_in_aexp ind
R45617:45618 Equiv <> a2 var
R45559:45578 Equiv <> var_not_used_in_aexp ind
R45582:45583 Equiv <> a1 var
prf 45674:45688 <> aeval_weakening
R45766:45768 Coq.Init.Logic <> :type_scope:x_'='_x not
R45742:45746 Imp <> aeval def
R45765:45765 Equiv <> a var
R45749:45754 Imp <> update def
R45761:45762 Equiv <> ni var
R45759:45759 Equiv <> i var
R45756:45757 Equiv <> st var
R45769:45773 Imp <> aeval def
R45778:45778 Equiv <> a var
R45775:45776 Equiv <> st var
R45712:45731 Equiv <> var_not_used_in_aexp ind
R45735:45735 Equiv <> a var
R45733:45733 Equiv <> i var
prf 46087:46102 <> inequiv_exercise
R46108:46109 Coq.Init.Logic <> :type_scope:'~'_x not
R46110:46115 Equiv <> cequiv def
R46143:46146 Imp <> ::'SKIP' not
R46118:46123 Imp <> ::'WHILE'_x_'DO'_x_'END' not
R46129:46132 Imp <> ::'WHILE'_x_'DO'_x_'END' not
R46137:46140 Imp <> ::'WHILE'_x_'DO'_x_'END' not
R46124:46128 Imp <> BTrue constr
R46133:46136 Imp <> ::'SKIP' not
mod 48175:48178 <> Himp
ind 48283:48285 Himp com
constr 48301:48305 Himp CSkip
constr 48317:48320 Himp CAss
constr 48346:48349 Himp CSeq
constr 48375:48377 Himp CIf
constr 48411:48416 Himp CWhile
constr 48443:48448 Himp CHavoc
R48309:48311 Equiv <> com ind
R48338:48340 Equiv <> com ind
R48330:48333 Imp <> aexp ind
R48324:48325 SfLib <> id ind
R48367:48369 Equiv <> com ind
R48360:48362 Equiv <> com ind
R48353:48355 Equiv <> com ind
R48403:48405 Equiv <> com ind
R48396:48398 Equiv <> com ind
R48389:48391 Equiv <> com ind
R48381:48384 Imp <> bexp ind
R48435:48437 Equiv <> com ind
R48428:48430 Equiv <> com ind
R48420:48423 Imp <> bexp ind
R48458:48460 Equiv <> com ind
R48452:48453 SfLib <> id ind
R48706:48710 Equiv Himp CSkip constr
not 48692 Himp ::'SKIP'
R48740:48743 Equiv Himp CAss constr
not 48722 Himp ::x_'::='_x
R48790:48793 Equiv Himp CSeq constr
not 48774 Himp ::x_';'_x
R48878:48883 Equiv Himp CWhile constr
not 48847 Himp ::'WHILE'_x_'DO'_x_'END'
R48977:48979 Equiv Himp CIf constr
not 48935 Himp ::'IFB'_x_'THEN'_x_'ELSE'_x_'FI'
R49052:49057 Equiv Himp CHavoc constr
not 49036 Himp ::'HAVOC'_x
ind 49467:49471 Himp ceval
constr 49512:49517 Himp E_Skip
constr 49560:49564 Himp E_Ass
constr 49688:49692 Himp E_Seq
constr 49817:49824 Himp E_IfTrue
constr 49993:50001 Himp E_IfFalse
constr 50173:50182 Himp E_WhileEnd
constr 50306:50316 Himp E_WhileLoop
constr 50561:50567 Himp E_Havoc
R49491:49495 Imp <> state def
R49482:49486 Imp <> state def
R49475:49477 Equiv Himp com ind
R50716:50720 Equiv <> ceval ind
R49533:49537 Imp <> state def
R49544:49546 Equiv Himp ::x_'/'_x_'||'_x not
R49549:49552 Equiv Himp ::x_'/'_x_'||'_x not
R49540:49543 Equiv Himp ::'SKIP' not
R49547:49548 Equiv <> st var
R49553:49554 Equiv <> st var
R49581:49585 Imp <> state def
R49594:49597 Imp <> aexp ind
R49605:49607 Coq.Init.Datatypes <> nat ind
R49615:49616 SfLib <> id ind
R49651:49651 Equiv Himp ::x_'/'_x_'||'_x not
R49660:49663 Equiv Himp ::x_'/'_x_'||'_x not
R49666:49669 Equiv Himp ::x_'/'_x_'||'_x not
R49653:49657 Equiv Himp ::x_'::='_x not
R49652:49652 Equiv <> X var
R49658:49659 Equiv <> a1 var
R49664:49665 Equiv <> st var
R49670:49675 Imp <> update def
R49682:49682 Equiv <> n var
R49680:49680 Equiv <> X var
R49677:49678 Equiv <> st var
R49643:49645 Coq.Init.Logic <> :type_scope:x_'='_x not
R49632:49636 Imp <> aeval def
R49641:49642 Equiv <> a1 var
R49638:49639 Equiv <> st var
R49646:49646 Equiv <> n var
R49712:49714 Equiv Himp com ind
R49732:49736 Imp <> state def
R49790:49790 Equiv Himp ::x_'/'_x_'||'_x not
R49798:49801 Equiv Himp ::x_'/'_x_'||'_x not
R49804:49807 Equiv Himp ::x_'/'_x_'||'_x not
R49793:49795 Equiv Himp ::x_';'_x not
R49791:49792 Equiv <> c1 var
R49796:49797 Equiv <> c2 var
R49802:49803 Equiv <> st var
R49808:49811 Equiv <> st'' var
R49772:49774 Equiv Himp ::x_'/'_x_'||'_x not
R49778:49781 Equiv Himp ::x_'/'_x_'||'_x not
R49770:49771 Equiv <> c2 var
R49775:49777 Equiv <> st' var
R49782:49785 Equiv <> st'' var
R49754:49756 Equiv Himp ::x_'/'_x_'||'_x not
R49759:49762 Equiv Himp ::x_'/'_x_'||'_x not
R49752:49753 Equiv <> c1 var
R49757:49758 Equiv <> st var
R49763:49765 Equiv <> st' var
R49845:49849 Imp <> state def
R49858:49861 Imp <> bexp ind
R49873:49875 Equiv Himp com ind
R49949:49949 Equiv Himp ::x_'/'_x_'||'_x not
R49975:49978 Equiv Himp ::x_'/'_x_'||'_x not
R49981:49984 Equiv Himp ::x_'/'_x_'||'_x not
R49950:49953 Equiv Himp ::'IFB'_x_'THEN'_x_'ELSE'_x_'FI' not
R49956:49961 Equiv Himp ::'IFB'_x_'THEN'_x_'ELSE'_x_'FI' not
R49964:49969 Equiv Himp ::'IFB'_x_'THEN'_x_'ELSE'_x_'FI' not
R49972:49974 Equiv Himp ::'IFB'_x_'THEN'_x_'ELSE'_x_'FI' not
R49954:49955 Equiv <> b1 var
R49962:49963 Equiv <> c1 var
R49970:49971 Equiv <> c2 var
R49979:49980 Equiv <> st var
R49985:49987 Equiv <> st' var
R49933:49935 Equiv Himp ::x_'/'_x_'||'_x not
R49938:49941 Equiv Himp ::x_'/'_x_'||'_x not
R49931:49932 Equiv <> c1 var
R49936:49937 Equiv <> st var
R49942:49944 Equiv <> st' var
R49905:49907 Coq.Init.Logic <> :type_scope:x_'='_x not
R49894:49898 Imp <> beval def
R49903:49904 Equiv <> b1 var
R49900:49901 Equiv <> st var
R49908:49911 Coq.Init.Datatypes <> true constr
R50022:50026 Imp <> state def
R50035:50038 Imp <> bexp ind
R50050:50052 Equiv Himp com ind
R50129:50129 Equiv Himp ::x_'/'_x_'||'_x not
R50155:50158 Equiv Himp ::x_'/'_x_'||'_x not
R50161:50164 Equiv Himp ::x_'/'_x_'||'_x not
R50130:50133 Equiv Himp ::'IFB'_x_'THEN'_x_'ELSE'_x_'FI' not
R50136:50141 Equiv Himp ::'IFB'_x_'THEN'_x_'ELSE'_x_'FI' not
R50144:50149 Equiv Himp ::'IFB'_x_'THEN'_x_'ELSE'_x_'FI' not
R50152:50154 Equiv Himp ::'IFB'_x_'THEN'_x_'ELSE'_x_'FI' not
R50134:50135 Equiv <> b1 var
R50142:50143 Equiv <> c1 var
R50150:50151 Equiv <> c2 var
R50159:50160 Equiv <> st var
R50165:50167 Equiv <> st' var
R50113:50115 Equiv Himp ::x_'/'_x_'||'_x not
R50118:50121 Equiv Himp ::x_'/'_x_'||'_x not
R50111:50112 Equiv <> c2 var
R50116:50117 Equiv <> st var
R50122:50124 Equiv <> st' var
R50083:50085 Coq.Init.Logic <> :type_scope:x_'='_x not
R50072:50076 Imp <> beval def
R50081:50082 Equiv <> b1 var
R50078:50079 Equiv <> st var
R50086:50090 Coq.Init.Datatypes <> false constr
R50199:50202 Imp <> bexp ind
R50211:50215 Imp <> state def
R50224:50226 Equiv Himp com ind
R50270:50270 Equiv Himp ::x_'/'_x_'||'_x not
R50289:50292 Equiv Himp ::x_'/'_x_'||'_x not
R50295:50298 Equiv Himp ::x_'/'_x_'||'_x not
R50271:50276 Equiv Himp ::'WHILE'_x_'DO'_x_'END' not
R50279:50282 Equiv Himp ::'WHILE'_x_'DO'_x_'END' not
R50285:50288 Equiv Himp ::'WHILE'_x_'DO'_x_'END' not
R50277:50278 Equiv <> b1 var
R50283:50284 Equiv <> c1 var
R50293:50294 Equiv <> st var
R50299:50300 Equiv <> st var
R50258:50260 Coq.Init.Logic <> :type_scope:x_'='_x not
R50247:50251 Imp <> beval def
R50256:50257 Equiv <> b1 var
R50253:50254 Equiv <> st var
R50261:50265 Coq.Init.Datatypes <> false constr
R50342:50346 Imp <> state def
R50355:50358 Imp <> bexp ind
R50367:50369 Equiv Himp com ind
R50523:50523 Equiv Himp ::x_'/'_x_'||'_x not
R50542:50545 Equiv Himp ::x_'/'_x_'||'_x not
R50548:50551 Equiv Himp ::x_'/'_x_'||'_x not
R50524:50529 Equiv Himp ::'WHILE'_x_'DO'_x_'END' not
R50532:50535 Equiv Himp ::'WHILE'_x_'DO'_x_'END' not
R50538:50541 Equiv Himp ::'WHILE'_x_'DO'_x_'END' not
R50530:50531 Equiv <> b1 var
R50536:50537 Equiv <> c1 var
R50546:50547 Equiv <> st var
R50552:50555 Equiv <> st'' var
R50467:50467 Equiv Himp ::x_'/'_x_'||'_x not
R50486:50489 Equiv Himp ::x_'/'_x_'||'_x not
R50493:50496 Equiv Himp ::x_'/'_x_'||'_x not
R50468:50473 Equiv Himp ::'WHILE'_x_'DO'_x_'END' not
R50476:50479 Equiv Himp ::'WHILE'_x_'DO'_x_'END' not
R50482:50485 Equiv Himp ::'WHILE'_x_'DO'_x_'END' not
R50474:50475 Equiv <> b1 var
R50480:50481 Equiv <> c1 var
R50490:50492 Equiv <> st' var
R50497:50500 Equiv <> st'' var
R50433:50435 Equiv Himp ::x_'/'_x_'||'_x not
R50438:50441 Equiv Himp ::x_'/'_x_'||'_x not
R50431:50432 Equiv <> c1 var
R50436:50437 Equiv <> st var
R50442:50444 Equiv <> st' var
R50402:50404 Coq.Init.Logic <> :type_scope:x_'='_x not
R50391:50395 Imp <> beval def
R50400:50401 Equiv <> b1 var
R50397:50398 Equiv <> st var
R50405:50408 Coq.Init.Datatypes <> true constr
R50584:50588 Imp <> state def
R50596:50597 SfLib <> id ind
R50605:50607 Coq.Init.Datatypes <> nat ind
R50627:50627 Equiv Himp ::x_'/'_x_'||'_x not
R50635:50638 Equiv Himp ::x_'/'_x_'||'_x not
R50641:50645 Equiv Himp ::x_'/'_x_'||'_x not
R50659:50659 Equiv Himp ::x_'/'_x_'||'_x not
R50628:50633 Equiv Himp ::'HAVOC'_x not
R50634:50634 Equiv <> X var
R50639:50640 Equiv <> st var
R50646:50651 Imp <> update def
R50658:50658 Equiv <> n var
R50656:50656 Equiv <> X var
R50653:50654 Equiv <> st var
R50716:50720 Equiv Himp ceval ind
not 50691 Himp ::x_'/'_x_'||'_x
def 51100:51113 Himp havoc_example1
R51117:51117 Equiv Himp ::x_'/'_x_'||'_x not
R51125:51128 Equiv Himp ::x_'/'_x_'||'_x not
R51140:51143 Equiv Himp ::x_'/'_x_'||'_x not
R51118:51123 Equiv Himp ::'HAVOC'_x not
R51124:51124 Imp <> X def
R51129:51139 Imp <> empty_state def
R51144:51149 Imp <> update def
R51163:51163 Imp <> X def
R51151:51161 Imp <> empty_state def
R51181:51187 Equiv Himp E_Havoc constr
R51181:51187 Equiv Himp E_Havoc constr
def 51205:51218 Himp havoc_example2
R51224:51224 Equiv Himp ::x_'/'_x_'||'_x not
R51238:51241 Equiv Himp ::x_'/'_x_'||'_x not
R51253:51256 Equiv Himp ::x_'/'_x_'||'_x not
R51229:51230 Equiv Himp ::x_';'_x not
R51225:51228 Equiv Himp ::'SKIP' not
R51231:51236 Equiv Himp ::'HAVOC'_x not
R51237:51237 Imp <> Z def
R51242:51252 Imp <> empty_state def
R51257:51262 Imp <> update def
R51276:51276 Imp <> Z def
R51264:51274 Imp <> empty_state def
R51306:51316 Imp <> empty_state def
R51295:51299 Equiv Himp E_Seq constr
R51306:51316 Imp <> empty_state def
R51295:51299 Equiv Himp E_Seq constr
def 51437:51442 Himp cequiv
R51453:51455 Equiv Himp com ind
R51484:51488 Imp <> state def
R51507:51511 Coq.Init.Logic <> :type_scope:x_'<->'_x not
R51495:51497 Equiv Himp ::x_'/'_x_'||'_x not
R51500:51503 Equiv Himp ::x_'/'_x_'||'_x not
R51493:51494 Equiv <> c1 var
R51498:51499 Equiv <> st var
R51504:51506 Equiv <> st' var
R51514:51516 Equiv Himp ::x_'/'_x_'||'_x not
R51519:51522 Equiv Himp ::x_'/'_x_'||'_x not
R51512:51513 Equiv <> c2 var
R51517:51518 Equiv <> st var
R51523:51525 Equiv <> st' var
def 51825:51827 Himp pXY
R51841:51842 Equiv Himp ::x_';'_x not
R51834:51839 Equiv Himp ::'HAVOC'_x not
R51840:51840 Imp <> X def
R51843:51848 Equiv Himp ::'HAVOC'_x not
R51849:51849 Imp <> Y def
def 51864:51866 Himp pYX
R51880:51881 Equiv Himp ::x_';'_x not
R51873:51878 Equiv Himp ::'HAVOC'_x not
R51879:51879 Imp <> Y def
R51882:51887 Equiv Himp ::'HAVOC'_x not
R51888:51888 Imp <> X def
prf 51995:52008 Himp pXY_cequiv_pYX
R52028:52031 Coq.Init.Logic <> :type_scope:x_'\/'_x not
R52014:52019 Equiv Himp cequiv def
R52025:52027 Equiv Himp pYX def
R52021:52023 Equiv Himp pXY def
R52032:52032 Coq.Init.Logic <> :type_scope:'~'_x not
R52033:52038 Equiv Himp cequiv def
R52044:52046 Equiv Himp pYX def
R52040:52042 Equiv Himp pXY def
R52063:52071 Coq.Init.Logic <> or_introl constr
R52063:52071 Coq.Init.Logic <> or_introl constr
R52081:52083 Equiv Himp pXY def
R52086:52088 Equiv Himp pYX def
R52091:52096 Equiv Himp cequiv def
R52197:52202 Imp <> update def
R52220:52220 Imp <> Y def
R52205:52210 Imp <> update def
R52215:52215 Imp <> X def
R52232:52237 Imp <> update def
R52256:52256 Imp <> X def
R52240:52245 Imp <> update def
R52250:52250 Imp <> Y def
R52232:52237 Imp <> update def
R52256:52256 Imp <> X def
R52240:52245 Imp <> update def
R52250:52250 Imp <> Y def
R52197:52202 Imp <> update def
R52220:52220 Imp <> Y def
R52205:52210 Imp <> update def
R52215:52215 Imp <> X def
R52280:52285 Imp <> update def
R52290:52290 Imp <> Y def
R52268:52272 Equiv Himp E_Seq constr
R52280:52285 Imp <> update def
R52290:52290 Imp <> Y def
R52268:52272 Equiv Himp E_Seq constr
R52316:52340 Equiv Himp functional_extensionality prfax
R52316:52340 Equiv Himp functional_extensionality prfax
R52356:52369 Imp <> update_permute thm
R52356:52369 Imp <> update_permute thm
R52405:52410 Imp <> update def
R52428:52428 Imp <> X def
R52413:52418 Imp <> update def
R52423:52423 Imp <> Y def
R52440:52445 Imp <> update def
R52464:52464 Imp <> Y def
R52448:52453 Imp <> update def
R52458:52458 Imp <> X def
R52440:52445 Imp <> update def
R52464:52464 Imp <> Y def
R52448:52453 Imp <> update def
R52458:52458 Imp <> X def
R52405:52410 Imp <> update def
R52428:52428 Imp <> X def
R52413:52418 Imp <> update def
R52423:52423 Imp <> Y def
R52488:52493 Imp <> update def
R52498:52498 Imp <> X def
R52476:52480 Equiv Himp E_Seq constr
R52488:52493 Imp <> update def
R52498:52498 Imp <> X def
R52476:52480 Equiv Himp E_Seq constr
R52524:52548 Equiv Himp functional_extensionality prfax
R52524:52548 Equiv Himp functional_extensionality prfax
R52564:52577 Imp <> update_permute thm
R52564:52577 Imp <> update_permute thm
def 52715:52720 Himp ptwice
R52734:52735 Equiv Himp ::x_';'_x not
R52727:52732 Equiv Himp ::'HAVOC'_x not
R52733:52733 Imp <> X def
R52736:52741 Equiv Himp ::'HAVOC'_x not
R52742:52742 Imp <> Y def
def 52757:52761 Himp pcopy
R52775:52776 Equiv Himp ::x_';'_x not
R52768:52773 Equiv Himp ::'HAVOC'_x not
R52774:52774 Imp <> X def
R52778:52782 Equiv Himp ::x_'::='_x not
R52777:52777 Imp <> Y def
R52783:52785 Imp <> AId constr
R52787:52787 Imp <> X def
prf 52958:52976 Himp ptwice_cequiv_pcopy
R53001:53004 Coq.Init.Logic <> :type_scope:x_'\/'_x not
R52982:52987 Equiv Himp cequiv def
R52996:53000 Equiv Himp pcopy def
R52989:52994 Equiv Himp ptwice def
R53005:53005 Coq.Init.Logic <> :type_scope:'~'_x not
R53006:53011 Equiv Himp cequiv def
R53020:53024 Equiv Himp pcopy def
R53013:53018 Equiv Himp ptwice def
def 53871:53872 Himp p1
R53876:53878 Equiv Himp com ind
R53885:53891 Equiv Himp ::'WHILE'_x_'DO'_x_'END' not
R53919:53927 Equiv Himp ::'WHILE'_x_'DO'_x_'END' not
R53969:53974 Equiv Himp ::'WHILE'_x_'DO'_x_'END' not
R53892:53895 Imp <> BNot constr
R53898:53900 Imp <> BEq constr
R53911:53914 Imp <> ANum constr
R53903:53905 Imp <> AId constr
R53907:53907 Imp <> X def
R53935:53940 Equiv Himp ::x_';'_x not
R53928:53933 Equiv Himp ::'HAVOC'_x not
R53934:53934 Imp <> Y def
R53942:53946 Equiv Himp ::x_'::='_x not
R53941:53941 Imp <> X def
R53947:53951 Imp <> APlus constr
R53962:53965 Imp <> ANum constr
R53954:53956 Imp <> AId constr
R53958:53958 Imp <> X def
def 53989:53990 Himp p2
R53994:53996 Equiv Himp com ind
R54003:54009 Equiv Himp ::'WHILE'_x_'DO'_x_'END' not
R54037:54045 Equiv Himp ::'WHILE'_x_'DO'_x_'END' not
R54050:54055 Equiv Himp ::'WHILE'_x_'DO'_x_'END' not
R54010:54013 Imp <> BNot constr
R54016:54018 Imp <> BEq constr
R54029:54032 Imp <> ANum constr
R54021:54023 Imp <> AId constr
R54025:54025 Imp <> X def
R54046:54049 Equiv Himp ::'SKIP' not
prf 54065:54071 Himp gt_SN_0
R54088:54090 Coq.Init.Peano <> :nat_scope:x_'>'_x not
R54085:54085 Coq.Init.Datatypes <> S constr
R54087:54087 Equiv <> n var
prf 54233:54247 Himp p1_loop_forever
R54281:54283 Coq.Init.Logic <> :type_scope:'~'_x not
R54388:54388 Coq.Init.Logic <> :type_scope:'~'_x not
R54284:54284 Equiv Himp ::x_'/'_x_'||'_x not
R54375:54378 Equiv Himp ::x_'/'_x_'||'_x not
R54381:54384 Equiv Himp ::x_'/'_x_'||'_x not
R54285:54291 Equiv Himp ::'WHILE'_x_'DO'_x_'END' not
R54319:54327 Equiv Himp ::'WHILE'_x_'DO'_x_'END' not
R54369:54374 Equiv Himp ::'WHILE'_x_'DO'_x_'END' not
R54292:54295 Imp <> BNot constr
R54298:54300 Imp <> BEq constr
R54311:54314 Imp <> ANum constr
R54303:54305 Imp <> AId constr
R54307:54307 Equiv <> X var
R54335:54340 Equiv Himp ::x_';'_x not
R54328:54333 Equiv Himp ::'HAVOC'_x not
R54334:54334 Imp <> Y def
R54342:54346 Equiv Himp ::x_'::='_x not
R54341:54341 Equiv <> X var
R54347:54351 Imp <> APlus constr
R54362:54365 Imp <> ANum constr
R54354:54356 Imp <> AId constr
R54358:54358 Equiv <> X var
R54379:54380 Equiv <> st var
R54385:54387 Equiv <> st' var
R54273:54275 Coq.Init.Peano <> :nat_scope:x_'>'_x not
R54269:54270 Equiv <> st var
R54272:54272 Equiv <> X var
R54415:54417 Coq.Init.Logic <> not def
R54439:54444 Equiv Himp ::'WHILE'_x_'DO'_x_'END' not
R54472:54483 Equiv Himp ::'WHILE'_x_'DO'_x_'END' not
R54521:54524 Equiv Himp ::'WHILE'_x_'DO'_x_'END' not
R54445:54448 Imp <> BNot constr
R54451:54453 Imp <> BEq constr
R54464:54467 Imp <> ANum constr
R54456:54458 Imp <> AId constr
R54491:54492 Equiv Himp ::x_';'_x not
R54484:54489 Equiv Himp ::'HAVOC'_x not
R54490:54490 Imp <> Y def
R54494:54498 Equiv Himp ::x_'::='_x not
R54499:54503 Imp <> APlus constr
R54514:54517 Imp <> ANum constr
R54506:54508 Imp <> AId constr
R54439:54444 Equiv Himp ::'WHILE'_x_'DO'_x_'END' not
R54472:54483 Equiv Himp ::'WHILE'_x_'DO'_x_'END' not
R54521:54524 Equiv Himp ::'WHILE'_x_'DO'_x_'END' not
R54445:54448 Imp <> BNot constr
R54451:54453 Imp <> BEq constr
R54464:54467 Imp <> ANum constr
R54456:54458 Imp <> AId constr
R54491:54492 Equiv Himp ::x_';'_x not
R54484:54489 Equiv Himp ::'HAVOC'_x not
R54490:54490 Imp <> Y def
R54494:54498 Equiv Himp ::x_'::='_x not
R54499:54503 Imp <> APlus constr
R54514:54517 Imp <> ANum constr
R54506:54508 Imp <> AId constr
R54809:54817 Imp <> update_eq thm
R54809:54817 Imp <> update_eq thm
R54841:54849 Imp <> update_eq thm
R54841:54849 Imp <> update_eq thm
R54860:54868 Coq.Arith.Plus <> plus_comm thm
R54860:54868 Coq.Arith.Plus <> plus_comm thm
R54885:54891 Equiv Himp gt_SN_0 thm
R54885:54891 Equiv Himp gt_SN_0 thm
prf 54920:54934 Himp P2_loop_forever
R54966:54968 Coq.Init.Logic <> :type_scope:'~'_x not
R55028:55028 Coq.Init.Logic <> :type_scope:'~'_x not
R54969:54969 Equiv Himp ::x_'/'_x_'||'_x not
R55015:55018 Equiv Himp ::x_'/'_x_'||'_x not
R55021:55024 Equiv Himp ::x_'/'_x_'||'_x not
R54970:54975 Equiv Himp ::'WHILE'_x_'DO'_x_'END' not
R55003:55006 Equiv Himp ::'WHILE'_x_'DO'_x_'END' not
R55011:55014 Equiv Himp ::'WHILE'_x_'DO'_x_'END' not
R54976:54979 Imp <> BNot constr
R54982:54984 Imp <> BEq constr
R54995:54998 Imp <> ANum constr
R54987:54989 Imp <> AId constr
R54991:54991 Equiv <> X var
R55007:55010 Equiv Himp ::'SKIP' not
R55019:55020 Equiv <> st var
R55025:55027 Equiv <> st' var
R54958:54960 Coq.Init.Peano <> :nat_scope:x_'>'_x not
R54954:54955 Equiv <> st var
R54957:54957 Equiv <> X var
R55056:55058 Coq.Init.Logic <> not def
R55080:55085 Equiv Himp ::'WHILE'_x_'DO'_x_'END' not
R55113:55116 Equiv Himp ::'WHILE'_x_'DO'_x_'END' not
R55121:55124 Equiv Himp ::'WHILE'_x_'DO'_x_'END' not
R55086:55089 Imp <> BNot constr
R55092:55094 Imp <> BEq constr
R55105:55108 Imp <> ANum constr
R55097:55099 Imp <> AId constr
R55117:55120 Equiv Himp ::'SKIP' not
R55080:55085 Equiv Himp ::'WHILE'_x_'DO'_x_'END' not
R55113:55116 Equiv Himp ::'WHILE'_x_'DO'_x_'END' not
R55121:55124 Equiv Himp ::'WHILE'_x_'DO'_x_'END' not
R55086:55089 Imp <> BNot constr
R55092:55094 Imp <> BEq constr
R55105:55108 Imp <> ANum constr
R55097:55099 Imp <> AId constr
R55117:55120 Equiv Himp ::'SKIP' not
prf 55388:55398 Himp p1_p2_equiv
R55402:55407 Equiv Himp cequiv def
R55412:55413 Equiv Himp p2 def
R55409:55410 Equiv Himp p1 def
R55430:55435 Equiv Himp cequiv def
R55438:55439 Equiv Himp p1 def
R55442:55443 Equiv Himp p2 def
R55472:55476 Imp <> aeval def
R55482:55484 Imp <> AId constr
R55486:55486 Imp <> X def
R55472:55476 Imp <> aeval def
R55482:55484 Imp <> AId constr
R55486:55486 Imp <> X def
R55535:55544 Equiv Himp E_WhileEnd constr
R55535:55544 Equiv Himp E_WhileEnd constr
R55641:55642 Coq.Init.Logic <> :type_scope:'~'_x not
R55736:55736 Coq.Init.Logic <> :type_scope:'~'_x not
R55643:55643 Equiv Himp ::x_'/'_x_'||'_x not
R55723:55726 Equiv Himp ::x_'/'_x_'||'_x not
R55729:55732 Equiv Himp ::x_'/'_x_'||'_x not
R55644:55649 Equiv Himp ::'WHILE'_x_'DO'_x_'END' not
R55677:55681 Equiv Himp ::'WHILE'_x_'DO'_x_'END' not
R55719:55722 Equiv Himp ::'WHILE'_x_'DO'_x_'END' not
R55650:55653 Imp <> BNot constr
R55656:55658 Imp <> BEq constr
R55669:55672 Imp <> ANum constr
R55661:55663 Imp <> AId constr
R55665:55665 Imp <> X def
R55689:55690 Equiv Himp ::x_';'_x not
R55682:55687 Equiv Himp ::'HAVOC'_x not
R55688:55688 Imp <> Y def
R55692:55696 Equiv Himp ::x_'::='_x not
R55691:55691 Imp <> X def
R55697:55701 Imp <> APlus constr
R55712:55715 Imp <> ANum constr
R55704:55706 Imp <> AId constr
R55708:55708 Imp <> X def
R55641:55642 Coq.Init.Logic <> :type_scope:'~'_x not
R55736:55736 Coq.Init.Logic <> :type_scope:'~'_x not
R55643:55643 Equiv Himp ::x_'/'_x_'||'_x not
R55723:55726 Equiv Himp ::x_'/'_x_'||'_x not
R55729:55732 Equiv Himp ::x_'/'_x_'||'_x not
R55644:55649 Equiv Himp ::'WHILE'_x_'DO'_x_'END' not
R55677:55681 Equiv Himp ::'WHILE'_x_'DO'_x_'END' not
R55719:55722 Equiv Himp ::'WHILE'_x_'DO'_x_'END' not
R55650:55653 Imp <> BNot constr
R55656:55658 Imp <> BEq constr
R55669:55672 Imp <> ANum constr
R55661:55663 Imp <> AId constr
R55665:55665 Imp <> X def
R55689:55690 Equiv Himp ::x_';'_x not
R55682:55687 Equiv Himp ::'HAVOC'_x not
R55688:55688 Imp <> Y def
R55692:55696 Equiv Himp ::x_'::='_x not
R55691:55691 Imp <> X def
R55697:55701 Imp <> APlus constr
R55712:55715 Imp <> ANum constr
R55704:55706 Imp <> AId constr
R55708:55708 Imp <> X def
R55746:55760 Equiv Himp p1_loop_forever thm
R55746:55760 Equiv Himp p1_loop_forever thm
R55801:55807 Equiv Himp gt_SN_0 thm
R55801:55807 Equiv Himp gt_SN_0 thm
R55838:55842 Imp <> aeval def
R55848:55850 Imp <> AId constr
R55852:55852 Imp <> X def
R55838:55842 Imp <> aeval def
R55848:55850 Imp <> AId constr
R55852:55852 Imp <> X def
R55901:55910 Equiv Himp E_WhileEnd constr
R55901:55910 Equiv Himp E_WhileEnd constr
R56014:56016 Coq.Init.Logic <> :type_scope:'~'_x not
R56076:56076 Coq.Init.Logic <> :type_scope:'~'_x not
R56017:56017 Equiv Himp ::x_'/'_x_'||'_x not
R56063:56066 Equiv Himp ::x_'/'_x_'||'_x not
R56069:56072 Equiv Himp ::x_'/'_x_'||'_x not
R56018:56023 Equiv Himp ::'WHILE'_x_'DO'_x_'END' not
R56051:56054 Equiv Himp ::'WHILE'_x_'DO'_x_'END' not
R56059:56062 Equiv Himp ::'WHILE'_x_'DO'_x_'END' not
R56024:56027 Imp <> BNot constr
R56030:56032 Imp <> BEq constr
R56043:56046 Imp <> ANum constr
R56035:56037 Imp <> AId constr
R56039:56039 Imp <> X def
R56055:56058 Equiv Himp ::'SKIP' not
R56014:56016 Coq.Init.Logic <> :type_scope:'~'_x not
R56076:56076 Coq.Init.Logic <> :type_scope:'~'_x not
R56017:56017 Equiv Himp ::x_'/'_x_'||'_x not
R56063:56066 Equiv Himp ::x_'/'_x_'||'_x not
R56069:56072 Equiv Himp ::x_'/'_x_'||'_x not
R56018:56023 Equiv Himp ::'WHILE'_x_'DO'_x_'END' not
R56051:56054 Equiv Himp ::'WHILE'_x_'DO'_x_'END' not
R56059:56062 Equiv Himp ::'WHILE'_x_'DO'_x_'END' not
R56024:56027 Imp <> BNot constr
R56030:56032 Imp <> BEq constr
R56043:56046 Imp <> ANum constr
R56035:56037 Imp <> AId constr
R56039:56039 Imp <> X def
R56055:56058 Equiv Himp ::'SKIP' not
R56086:56100 Equiv Himp P2_loop_forever thm
R56086:56100 Equiv Himp P2_loop_forever thm
R56141:56147 Equiv Himp gt_SN_0 thm
R56141:56147 Equiv Himp gt_SN_0 thm
def 56182:56183 Himp p3
R56187:56189 Equiv Himp com ind
R56208:56211 Equiv Himp ::x_';'_x not
R56197:56201 Equiv Himp ::x_'::='_x not
R56196:56196 Imp <> Z def
R56202:56205 Imp <> ANum constr
R56212:56218 Equiv Himp ::'WHILE'_x_'DO'_x_'END' not
R56246:56254 Equiv Himp ::'WHILE'_x_'DO'_x_'END' not
R56275:56280 Equiv Himp ::'WHILE'_x_'DO'_x_'END' not
R56219:56222 Imp <> BNot constr
R56225:56227 Imp <> BEq constr
R56238:56241 Imp <> ANum constr
R56230:56232 Imp <> AId constr
R56234:56234 Imp <> X def
R56262:56267 Equiv Himp ::x_';'_x not
R56255:56260 Equiv Himp ::'HAVOC'_x not
R56261:56261 Imp <> X def
R56268:56273 Equiv Himp ::'HAVOC'_x not
R56274:56274 Imp <> Z def
def 56295:56296 Himp p4
R56300:56302 Equiv Himp com ind
R56323:56326 Equiv Himp ::x_';'_x not
R56310:56315 Equiv Himp ::x_'::='_x not
R56322:56322 Equiv Himp ::x_'::='_x not
R56309:56309 Imp <> X def
R56316:56319 Imp <> ANum constr
R56328:56333 Equiv Himp ::x_'::='_x not
R56340:56340 Equiv Himp ::x_'::='_x not
R56327:56327 Imp <> Z def
R56334:56337 Imp <> ANum constr
prf 56353:56365 Himp p3_p4_inequiv
R56369:56370 Coq.Init.Logic <> :type_scope:'~'_x not
R56371:56376 Equiv Himp cequiv def
R56381:56382 Equiv Himp p4 def
R56378:56379 Equiv Himp p3 def
R56399:56404 Equiv Himp cequiv def
R56407:56408 Equiv Himp p3 def
R56411:56412 Equiv Himp p4 def
R56415:56417 Coq.Init.Logic <> not def
R56439:56439 Equiv Himp ::x_'/'_x_'||'_x not
R56518:56522 Equiv Himp ::x_'/'_x_'||'_x not
R56545:56559 Equiv Himp ::x_'/'_x_'||'_x not
R56595:56595 Equiv Himp ::x_'/'_x_'||'_x not
R56452:56460 Equiv Himp ::x_';'_x not
R56441:56445 Equiv Himp ::x_'::='_x not
R56440:56440 Imp <> Z def
R56446:56449 Imp <> ANum constr
R56461:56466 Equiv Himp ::'WHILE'_x_'DO'_x_'END' not
R56494:56497 Equiv Himp ::'WHILE'_x_'DO'_x_'END' not
R56514:56517 Equiv Himp ::'WHILE'_x_'DO'_x_'END' not
R56467:56470 Imp <> BNot constr
R56473:56475 Imp <> BEq constr
R56486:56489 Imp <> ANum constr
R56478:56480 Imp <> AId constr
R56482:56482 Imp <> X def
R56505:56506 Equiv Himp ::x_';'_x not
R56498:56503 Equiv Himp ::'HAVOC'_x not
R56504:56504 Imp <> X def
R56507:56512 Equiv Himp ::'HAVOC'_x not
R56513:56513 Imp <> Z def
R56523:56528 Imp <> update def
R56542:56542 Imp <> X def
R56530:56540 Imp <> empty_state def
R56560:56565 Imp <> update def
R56592:56592 Imp <> Z def
R56568:56573 Imp <> update def
R56587:56587 Imp <> X def
R56575:56585 Imp <> empty_state def
R56439:56439 Equiv Himp ::x_'/'_x_'||'_x not
R56518:56522 Equiv Himp ::x_'/'_x_'||'_x not
R56545:56559 Equiv Himp ::x_'/'_x_'||'_x not
R56595:56595 Equiv Himp ::x_'/'_x_'||'_x not
R56452:56460 Equiv Himp ::x_';'_x not
R56441:56445 Equiv Himp ::x_'::='_x not
R56440:56440 Imp <> Z def
R56446:56449 Imp <> ANum constr
R56461:56466 Equiv Himp ::'WHILE'_x_'DO'_x_'END' not
R56494:56497 Equiv Himp ::'WHILE'_x_'DO'_x_'END' not
R56514:56517 Equiv Himp ::'WHILE'_x_'DO'_x_'END' not
R56467:56470 Imp <> BNot constr
R56473:56475 Imp <> BEq constr
R56486:56489 Imp <> ANum constr
R56478:56480 Imp <> AId constr
R56482:56482 Imp <> X def
R56505:56506 Equiv Himp ::x_';'_x not
R56498:56503 Equiv Himp ::'HAVOC'_x not
R56504:56504 Imp <> X def
R56507:56512 Equiv Himp ::'HAVOC'_x not
R56513:56513 Imp <> Z def
R56523:56528 Imp <> update def
R56542:56542 Imp <> X def
R56530:56540 Imp <> empty_state def
R56560:56565 Imp <> update def
R56592:56592 Imp <> Z def
R56568:56573 Imp <> update def
R56587:56587 Imp <> X def
R56575:56585 Imp <> empty_state def
R56618:56623 Imp <> update def
R56650:56650 Imp <> Z def
R56626:56631 Imp <> update def
R56645:56645 Imp <> X def
R56633:56643 Imp <> empty_state def
R56606:56610 Equiv Himp E_Seq constr
R56618:56623 Imp <> update def
R56650:56650 Imp <> Z def
R56626:56631 Imp <> update def
R56645:56645 Imp <> X def
R56633:56643 Imp <> empty_state def
R56606:56610 Equiv Himp E_Seq constr
R56662:56666 Equiv Himp E_Ass constr
R56662:56666 Equiv Himp E_Ass constr
R56712:56717 Imp <> update def
R56744:56744 Imp <> Z def
R56720:56725 Imp <> update def
R56739:56739 Imp <> X def
R56727:56737 Imp <> empty_state def
R56688:56698 Equiv Himp E_WhileLoop constr
R56712:56717 Imp <> update def
R56744:56744 Imp <> Z def
R56720:56725 Imp <> update def
R56739:56739 Imp <> X def
R56727:56737 Imp <> empty_state def
R56688:56698 Equiv Himp E_WhileLoop constr
R56781:56786 Imp <> update def
R56813:56813 Imp <> X def
R56789:56794 Imp <> update def
R56808:56808 Imp <> Z def
R56796:56806 Imp <> empty_state def
R56769:56773 Equiv Himp E_Seq constr
R56781:56786 Imp <> update def
R56813:56813 Imp <> X def
R56789:56794 Imp <> update def
R56808:56808 Imp <> Z def
R56796:56806 Imp <> empty_state def
R56769:56773 Equiv Himp E_Seq constr
R56830:56835 Imp <> update def
R56862:56862 Imp <> Z def
R56838:56843 Imp <> update def
R56857:56857 Imp <> X def
R56845:56855 Imp <> empty_state def
R56873:56878 Imp <> update def
R56905:56905 Imp <> X def
R56881:56886 Imp <> update def
R56900:56900 Imp <> Z def
R56888:56898 Imp <> empty_state def
R56873:56878 Imp <> update def
R56905:56905 Imp <> X def
R56881:56886 Imp <> update def
R56900:56900 Imp <> Z def
R56888:56898 Imp <> empty_state def
R56830:56835 Imp <> update def
R56862:56862 Imp <> Z def
R56838:56843 Imp <> update def
R56857:56857 Imp <> X def
R56845:56855 Imp <> empty_state def
R56920:56925 Imp <> update def
R56952:56952 Imp <> X def
R56928:56933 Imp <> update def
R56947:56947 Imp <> Z def
R56935:56945 Imp <> empty_state def
R56963:56968 Imp <> update def
R57008:57008 Imp <> X def
R56971:56976 Imp <> update def
R57003:57003 Imp <> X def
R56979:56984 Imp <> update def
R56998:56998 Imp <> Z def
R56986:56996 Imp <> empty_state def
R56963:56968 Imp <> update def
R57008:57008 Imp <> X def
R56971:56976 Imp <> update def
R57003:57003 Imp <> X def
R56979:56984 Imp <> update def
R56998:56998 Imp <> Z def
R56986:56996 Imp <> empty_state def
R56920:56925 Imp <> update def
R56952:56952 Imp <> X def
R56928:56933 Imp <> update def
R56947:56947 Imp <> Z def
R56935:56945 Imp <> empty_state def
R57036:57060 Equiv Himp functional_extensionality prfax
R57036:57060 Equiv Himp functional_extensionality prfax
R57073:57078 Imp <> update def
R57092:57092 Imp <> Z def
R57080:57090 Imp <> empty_state def
R57073:57078 Imp <> update def
R57092:57092 Imp <> Z def
R57080:57090 Imp <> empty_state def
R57119:57131 Imp <> update_shadow thm
R57119:57131 Imp <> update_shadow thm
R57141:57165 Equiv Himp functional_extensionality prfax
R57141:57165 Equiv Himp functional_extensionality prfax
R57182:57195 Imp <> update_permute thm
R57182:57195 Imp <> update_permute thm
R57221:57226 Imp <> update def
R57253:57253 Imp <> X def
R57229:57234 Imp <> update def
R57248:57248 Imp <> Z def
R57236:57246 Imp <> empty_state def
R57264:57269 Imp <> update def
R57296:57296 Imp <> Z def
R57272:57277 Imp <> update def
R57291:57291 Imp <> X def
R57279:57289 Imp <> empty_state def
R57264:57269 Imp <> update def
R57296:57296 Imp <> Z def
R57272:57277 Imp <> update def
R57291:57291 Imp <> X def
R57279:57289 Imp <> empty_state def
R57221:57226 Imp <> update def
R57253:57253 Imp <> X def
R57229:57234 Imp <> update def
R57248:57248 Imp <> Z def
R57236:57246 Imp <> empty_state def
R57312:57317 Imp <> update def
R57344:57344 Imp <> Z def
R57320:57325 Imp <> update def
R57339:57339 Imp <> X def
R57327:57337 Imp <> empty_state def
R57355:57360 Imp <> update def
R57400:57400 Imp <> Z def
R57363:57368 Imp <> update def
R57395:57395 Imp <> Z def
R57371:57376 Imp <> update def
R57390:57390 Imp <> X def
R57378:57388 Imp <> empty_state def
R57355:57360 Imp <> update def
R57400:57400 Imp <> Z def
R57363:57368 Imp <> update def
R57395:57395 Imp <> Z def
R57371:57376 Imp <> update def
R57390:57390 Imp <> X def
R57378:57388 Imp <> empty_state def
R57312:57317 Imp <> update def
R57344:57344 Imp <> Z def
R57320:57325 Imp <> update def
R57339:57339 Imp <> X def
R57327:57337 Imp <> empty_state def
R57426:57450 Equiv Himp functional_extensionality prfax
R57426:57450 Equiv Himp functional_extensionality prfax
R57463:57468 Imp <> update def
R57482:57482 Imp <> X def
R57470:57480 Imp <> empty_state def
R57463:57468 Imp <> update def
R57482:57482 Imp <> X def
R57470:57480 Imp <> empty_state def
R57509:57521 Imp <> update_shadow thm
R57509:57521 Imp <> update_shadow thm
R57531:57555 Equiv Himp functional_extensionality prfax
R57531:57555 Equiv Himp functional_extensionality prfax
R57572:57585 Imp <> update_permute thm
R57572:57585 Imp <> update_permute thm
R57608:57617 Equiv Himp E_WhileEnd constr
R57608:57617 Equiv Himp E_WhileEnd constr
R57715:57720 Imp <> update def
R57747:57747 Imp <> X def
R57723:57728 Imp <> update def
R57742:57742 Imp <> X def
R57730:57740 Imp <> empty_state def
R57758:57763 Imp <> update def
R57777:57777 Imp <> X def
R57765:57775 Imp <> empty_state def
R57758:57763 Imp <> update def
R57777:57777 Imp <> X def
R57765:57775 Imp <> empty_state def
R57715:57720 Imp <> update def
R57747:57747 Imp <> X def
R57723:57728 Imp <> update def
R57742:57742 Imp <> X def
R57730:57740 Imp <> empty_state def
R57876:57878 Coq.Init.Logic <> :type_scope:x_'='_x not
R57838:57843 Imp <> update def
R57870:57870 Imp <> Z def
R57846:57851 Imp <> update def
R57865:57865 Imp <> X def
R57853:57863 Imp <> empty_state def
R57875:57875 Imp <> Z def
R57880:57885 Imp <> update def
R57912:57912 Imp <> Z def
R57888:57893 Imp <> update def
R57907:57907 Imp <> X def
R57895:57905 Imp <> empty_state def
R57917:57917 Imp <> Z def
R57876:57878 Coq.Init.Logic <> :type_scope:x_'='_x not
R57838:57843 Imp <> update def
R57870:57870 Imp <> Z def
R57846:57851 Imp <> update def
R57865:57865 Imp <> X def
R57853:57863 Imp <> empty_state def
R57875:57875 Imp <> Z def
R57880:57885 Imp <> update def
R57912:57912 Imp <> Z def
R57888:57893 Imp <> update def
R57907:57907 Imp <> X def
R57895:57905 Imp <> empty_state def
R57917:57917 Imp <> Z def
R57969:57993 Equiv Himp functional_extensionality prfax
R57969:57993 Equiv Himp functional_extensionality prfax
R58019:58031 Imp <> update_shadow thm
R58019:58031 Imp <> update_shadow thm
def 58051:58052 Himp p5
R58056:58058 Equiv Himp com ind
R58065:58071 Equiv Himp ::'WHILE'_x_'DO'_x_'END' not
R58099:58107 Equiv Himp ::'WHILE'_x_'DO'_x_'END' not
R58115:58120 Equiv Himp ::'WHILE'_x_'DO'_x_'END' not
R58072:58075 Imp <> BNot constr
R58078:58080 Imp <> BEq constr
R58091:58094 Imp <> ANum constr
R58083:58085 Imp <> AId constr
R58087:58087 Imp <> X def
R58108:58113 Equiv Himp ::'HAVOC'_x not
R58114:58114 Imp <> X def
def 58135:58136 Himp p6
R58140:58142 Equiv Himp com ind
R58150:58154 Equiv Himp ::x_'::='_x not
R58149:58149 Imp <> X def
R58155:58158 Imp <> ANum constr
prf 58171:58180 Himp x_in_state
R58214:58216 Coq.Init.Logic <> :type_scope:x_'='_x not
R58212:58213 Equiv <> st var
R58217:58222 Imp <> update def
R58229:58229 Equiv <> x var
R58227:58227 Equiv <> X var
R58224:58225 Equiv <> st var
R58204:58206 Coq.Init.Logic <> :type_scope:x_'='_x not
R58200:58201 Equiv <> st var
R58203:58203 Equiv <> X var
R58207:58207 Equiv <> x var
R58253:58277 Equiv Himp functional_extensionality prfax
R58253:58277 Equiv Himp functional_extensionality prfax
R58299:58304 SfLib <> beq_id def
R58299:58304 SfLib <> beq_id def
R58345:58353 SfLib <> beq_id_eq thm
R58345:58353 SfLib <> beq_id_eq thm
R58379:58387 Imp <> update_eq thm
R58379:58387 Imp <> update_eq thm
R58427:58436 Imp <> update_neq thm
R58427:58436 Imp <> update_neq thm
prf 58486:58496 Himp p5_p6_equiv
R58500:58505 Equiv Himp cequiv def
R58510:58511 Equiv Himp p6 def
R58507:58508 Equiv Himp p5 def
R58529:58534 Equiv Himp cequiv def
R58537:58538 Equiv Himp p5 def
R58541:58542 Equiv Himp p6 def
R58600:58605 Equiv Himp ::'WHILE'_x_'DO'_x_'END' not
R58633:58636 Equiv Himp ::'WHILE'_x_'DO'_x_'END' not
R58644:58647 Equiv Himp ::'WHILE'_x_'DO'_x_'END' not
R58606:58609 Imp <> BNot constr
R58612:58614 Imp <> BEq constr
R58625:58628 Imp <> ANum constr
R58617:58619 Imp <> AId constr
R58621:58621 Imp <> X def
R58637:58642 Equiv Himp ::'HAVOC'_x not
R58643:58643 Imp <> X def
R58600:58605 Equiv Himp ::'WHILE'_x_'DO'_x_'END' not
R58633:58636 Equiv Himp ::'WHILE'_x_'DO'_x_'END' not
R58644:58647 Equiv Himp ::'WHILE'_x_'DO'_x_'END' not
R58606:58609 Imp <> BNot constr
R58612:58614 Imp <> BEq constr
R58625:58628 Imp <> ANum constr
R58617:58619 Imp <> AId constr
R58621:58621 Imp <> X def
R58637:58642 Equiv Himp ::'HAVOC'_x not
R58643:58643 Imp <> X def
R58750:58763 Coq.Bool.Bool <> negb_false_iff thm
R58750:58763 Coq.Bool.Bool <> negb_false_iff thm
R58778:58789 Coq.Arith.EqNat <> beq_nat_true thm
R58778:58789 Coq.Arith.EqNat <> beq_nat_true thm
R58818:58820 Coq.Init.Logic <> :type_scope:x_'='_x not
R58805:58810 Imp <> update def
R58815:58815 Imp <> X def
R58818:58820 Coq.Init.Logic <> :type_scope:x_'='_x not
R58805:58810 Imp <> update def
R58815:58815 Imp <> X def
R58842:58851 Equiv Himp x_in_state thm
R58842:58851 Equiv Himp x_in_state thm
R58874:58874 Equiv Himp ::x_'/'_x_'||'_x not
R58887:58890 Equiv Himp ::x_'/'_x_'||'_x not
R58893:58897 Equiv Himp ::x_'/'_x_'||'_x not
R58911:58911 Equiv Himp ::x_'/'_x_'||'_x not
R58876:58880 Equiv Himp ::x_'::='_x not
R58875:58875 Imp <> X def
R58881:58884 Imp <> ANum constr
R58898:58903 Imp <> update def
R58908:58908 Imp <> X def
R58874:58874 Equiv Himp ::x_'/'_x_'||'_x not
R58887:58890 Equiv Himp ::x_'/'_x_'||'_x not
R58893:58897 Equiv Himp ::x_'/'_x_'||'_x not
R58911:58911 Equiv Himp ::x_'/'_x_'||'_x not
R58876:58880 Equiv Himp ::x_'::='_x not
R58875:58875 Imp <> X def
R58881:58884 Imp <> ANum constr
R58898:58903 Imp <> update def
R58908:58908 Imp <> X def
R59024:59024 Equiv Himp ::x_'/'_x_'||'_x not
R59037:59040 Equiv Himp ::x_'/'_x_'||'_x not
R59044:59047 Equiv Himp ::x_'/'_x_'||'_x not
R59026:59030 Equiv Himp ::x_'::='_x not
R59025:59025 Imp <> X def
R59031:59034 Imp <> ANum constr
R59024:59024 Equiv Himp ::x_'/'_x_'||'_x not
R59037:59040 Equiv Himp ::x_'/'_x_'||'_x not
R59044:59047 Equiv Himp ::x_'/'_x_'||'_x not
R59026:59030 Equiv Himp ::x_'::='_x not
R59025:59025 Imp <> X def
R59031:59034 Imp <> ANum constr
R59155:59160 Imp <> update def
R59178:59178 Imp <> X def
R59163:59168 Imp <> update def
R59173:59173 Imp <> X def
R59189:59194 Imp <> update def
R59199:59199 Imp <> X def
R59189:59194 Imp <> update def
R59199:59199 Imp <> X def
R59155:59160 Imp <> update def
R59178:59178 Imp <> X def
R59163:59168 Imp <> update def
R59173:59173 Imp <> X def
R59211:59215 Equiv Himp E_Ass constr
R59211:59215 Equiv Himp E_Ass constr
R59240:59264 Equiv Himp functional_extensionality prfax
R59240:59264 Equiv Himp functional_extensionality prfax
R59290:59302 Imp <> update_shadow thm
R59290:59302 Imp <> update_shadow thm
R59368:59374 Coq.Arith.EqNat <> beq_nat def
R59377:59381 Imp <> aeval def
R59387:59389 Imp <> AId constr
R59391:59391 Imp <> X def
R59368:59374 Coq.Arith.EqNat <> beq_nat def
R59377:59381 Imp <> aeval def
R59387:59389 Imp <> AId constr
R59391:59391 Imp <> X def
R59455:59466 Coq.Arith.EqNat <> beq_nat_true thm
R59455:59466 Coq.Arith.EqNat <> beq_nat_true thm
R59503:59506 Coq.Init.Logic <> :type_scope:x_'='_x not
R59520:59520 Coq.Init.Logic <> :type_scope:x_'='_x not
R59507:59512 Imp <> update def
R59517:59517 Imp <> X def
R59503:59506 Coq.Init.Logic <> :type_scope:x_'='_x not
R59520:59520 Coq.Init.Logic <> :type_scope:x_'='_x not
R59507:59512 Imp <> update def
R59517:59517 Imp <> X def
R59530:59539 Equiv Himp x_in_state thm
R59530:59539 Equiv Himp x_in_state thm
R59575:59584 Equiv Himp E_WhileEnd constr
R59575:59584 Equiv Himp E_WhileEnd constr
R59600:59613 Coq.Bool.Bool <> negb_false_iff thm
R59600:59613 Coq.Bool.Bool <> negb_false_iff thm
R59673:59673 Equiv Himp ::x_'/'_x_'||'_x not
R59681:59684 Equiv Himp ::x_'/'_x_'||'_x not
R59687:59691 Equiv Himp ::x_'/'_x_'||'_x not
R59705:59705 Equiv Himp ::x_'/'_x_'||'_x not
R59674:59679 Equiv Himp ::'HAVOC'_x not
R59680:59680 Imp <> X def
R59692:59697 Imp <> update def
R59702:59702 Imp <> X def
R59673:59673 Equiv Himp ::x_'/'_x_'||'_x not
R59681:59684 Equiv Himp ::x_'/'_x_'||'_x not
R59687:59691 Equiv Himp ::x_'/'_x_'||'_x not
R59705:59705 Equiv Himp ::x_'/'_x_'||'_x not
R59674:59679 Equiv Himp ::'HAVOC'_x not
R59680:59680 Imp <> X def
R59692:59697 Imp <> update def
R59702:59702 Imp <> X def
R59732:59737 Imp <> update def
R59742:59742 Imp <> X def
R59732:59737 Imp <> update def
R59742:59742 Imp <> X def
R59761:59771 Equiv Himp E_WhileLoop constr
R59761:59771 Equiv Himp E_WhileLoop constr
R59849:59858 Equiv Himp E_WhileEnd constr
R59849:59858 Equiv Himp E_WhileEnd constr
R59928:59931 Equiv <> <> mod
def 60785:60791 <> stequiv
R60804:60808 Imp <> state def
R60833:60834 SfLib <> id ind
R60843:60845 Coq.Init.Logic <> :type_scope:x_'='_x not
R60838:60840 Equiv <> st1 var
R60842:60842 Equiv <> X var
R60846:60848 Equiv <> st2 var
R60850:60850 Equiv <> X var
R60882:60888 Equiv <> stequiv def
not 60864 <> ::x_'~'_x
prf 61161:61172 <> stequiv_refl
R61189:61193 Imp <> state def
R61202:61204 Equiv <> ::x_'~'_x not
R61200:61201 Equiv <> st var
R61205:61206 Equiv <> st var
prf 61317:61327 <> stequiv_sym
R61349:61353 Imp <> state def
R61379:61381 Equiv <> ::x_'~'_x not
R61376:61378 Equiv <> st2 var
R61382:61384 Equiv <> st1 var
R61363:61365 Equiv <> ::x_'~'_x not
R61360:61362 Equiv <> st1 var
R61366:61368 Equiv <> st2 var
prf 61501:61513 <> stequiv_trans
R61539:61543 Imp <> state def
R61585:61587 Equiv <> ::x_'~'_x not
R61582:61584 Equiv <> st1 var
R61588:61590 Equiv <> st3 var
R61569:61571 Equiv <> ::x_'~'_x not
R61566:61568 Equiv <> st2 var
R61572:61574 Equiv <> st3 var
R61553:61555 Equiv <> ::x_'~'_x not
R61550:61552 Equiv <> st1 var
R61556:61558 Equiv <> st2 var
prf 61736:61749 <> stequiv_update
R61771:61775 Imp <> state def
R61807:61808 SfLib <> id ind
R61814:61816 Coq.Init.Datatypes <> nat ind
R61836:61838 Equiv <> ::x_'~'_x not
R61822:61827 Imp <> update def
R61835:61835 Equiv <> n var
R61833:61833 Equiv <> X var
R61829:61831 Equiv <> st1 var
R61839:61844 Imp <> update def
R61852:61852 Equiv <> n var
R61850:61850 Equiv <> X var
R61846:61848 Equiv <> st2 var
R61784:61786 Equiv <> ::x_'~'_x not
R61781:61783 Equiv <> st1 var
R61787:61789 Equiv <> st2 var
prf 62096:62108 <> stequiv_aeval
R62130:62134 Imp <> state def
R62166:62169 Imp <> aexp ind
R62184:62186 Coq.Init.Logic <> :type_scope:x_'='_x not
R62173:62177 Imp <> aeval def
R62183:62183 Equiv <> a var
R62179:62181 Equiv <> st1 var
R62187:62191 Imp <> aeval def
R62197:62197 Equiv <> a var
R62193:62195 Equiv <> st2 var
R62144:62146 Equiv <> ::x_'~'_x not
R62141:62143 Equiv <> st1 var
R62147:62149 Equiv <> st2 var
prf 62312:62324 <> stequiv_beval
R62346:62350 Imp <> state def
R62382:62385 Imp <> bexp ind
R62400:62402 Coq.Init.Logic <> :type_scope:x_'='_x not
R62389:62393 Imp <> beval def
R62399:62399 Equiv <> b var
R62395:62397 Equiv <> st1 var
R62403:62407 Imp <> beval def
R62413:62413 Equiv <> b var
R62409:62411 Equiv <> st2 var
R62360:62362 Equiv <> ::x_'~'_x not
R62357:62359 Equiv <> st1 var
R62363:62365 Equiv <> st2 var
prf 62643:62655 <> stequiv_ceval
R62676:62680 Imp <> state def
R62712:62714 Imp <> com ind
R62724:62728 Imp <> state def
R62761:62767 Coq.Init.Logic <> :type_scope:'exists'_x_'..'_x_','_x not
R62780:62786 Coq.Init.Logic <> :type_scope:'exists'_x_'..'_x_','_x not
R62820:62820 Coq.Init.Logic <> :type_scope:'exists'_x_'..'_x_','_x not
R62775:62779 Imp <> state def
R62787:62787 Coq.Init.Logic <> :type_scope:x_'/\'_x not
R62803:62808 Coq.Init.Logic <> :type_scope:x_'/\'_x not
R62789:62791 Imp <> ::x_'/'_x_'||'_x not
R62795:62798 Imp <> ::x_'/'_x_'||'_x not
R62788:62788 Equiv <> c var
R62792:62794 Equiv <> st2 var
R62799:62802 Equiv <> st2' var
R62813:62815 Equiv <> ::x_'~'_x not
R62809:62812 Equiv <> st1' var
R62816:62819 Equiv <> st2' var
R62738:62740 Imp <> ::x_'/'_x_'||'_x not
R62744:62747 Imp <> ::x_'/'_x_'||'_x not
R62737:62737 Equiv <> c var
R62741:62743 Equiv <> st1 var
R62748:62751 Equiv <> st1' var
R62689:62691 Equiv <> ::x_'~'_x not
R62686:62688 Equiv <> st1 var
R62692:62694 Equiv <> st2 var
R63034:63039 Imp <> update def
R63034:63039 Imp <> update def
R63111:63123 Equiv <> stequiv_aeval prfax
R63111:63123 Equiv <> stequiv_aeval prfax
R63152:63165 Equiv <> stequiv_update prfax
R63152:63165 Equiv <> stequiv_update prfax
R63343:63347 Imp <> E_Seq constr
R63343:63347 Imp <> E_Seq constr
R63498:63505 Imp <> E_IfTrue constr
R63498:63505 Imp <> E_IfTrue constr
R63539:63551 Equiv <> stequiv_beval prfax
R63539:63551 Equiv <> stequiv_beval prfax
R63702:63710 Imp <> E_IfFalse constr
R63702:63710 Imp <> E_IfFalse constr
R63743:63755 Equiv <> stequiv_beval prfax
R63743:63755 Equiv <> stequiv_beval prfax
R63855:63864 Imp <> E_WhileEnd constr
R63855:63864 Imp <> E_WhileEnd constr
R63897:63909 Equiv <> stequiv_beval prfax
R63897:63909 Equiv <> stequiv_beval prfax
R64113:64123 Imp <> E_WhileLoop constr
R64113:64123 Imp <> E_WhileLoop constr
R64174:64186 Equiv <> stequiv_beval prfax
R64174:64186 Equiv <> stequiv_beval prfax
ind 64656:64661 <> ceval'
constr 64702:64708 <> E_equiv
R64681:64685 Imp <> state def
R64672:64676 Imp <> state def
R64665:64667 Imp <> com ind
R64830:64835 Equiv <> ceval' ind
R64779:64781 Equiv <> ::x_'/'_x_'||'''_x not
R64784:64788 Equiv <> ::x_'/'_x_'||'''_x not
R64778:64778 Equiv <> c var
R64782:64783 Equiv <> st var
R64789:64792 Equiv <> st'' var
R64763:64765 Equiv <> ::x_'~'_x not
R64760:64762 Equiv <> st' var
R64766:64769 Equiv <> st'' var
R64739:64741 Imp <> ::x_'/'_x_'||'_x not
R64744:64747 Imp <> ::x_'/'_x_'||'_x not
R64738:64738 Equiv <> c var
R64742:64743 Equiv <> st var
R64748:64750 Equiv <> st' var
R64830:64835 Equiv <> ceval' ind
not 64804 <> ::x_'/'_x_'||'''_x
def 64925:64931 <> cequiv'
R64942:64944 Imp <> com ind
R64976:64980 Imp <> state def
R64988:64988 Coq.Init.Logic <> :type_scope:x_'<->'_x not
R65004:65010 Coq.Init.Logic <> :type_scope:x_'<->'_x not
R65026:65026 Coq.Init.Logic <> :type_scope:x_'<->'_x not
R64991:64993 Equiv <> ::x_'/'_x_'||'''_x not
R64996:65000 Equiv <> ::x_'/'_x_'||'''_x not
R64989:64990 Equiv <> c1 var
R64994:64995 Equiv <> st var
R65001:65003 Equiv <> st' var
R65013:65015 Equiv <> ::x_'/'_x_'||'''_x not
R65018:65022 Equiv <> ::x_'/'_x_'||'''_x not
R65011:65012 Equiv <> c2 var
R65016:65017 Equiv <> st var
R65023:65025 Equiv <> st' var
prf 65198:65212 <> cequiv__cequiv'
R65231:65233 Imp <> com ind
R65255:65261 Equiv <> cequiv' def
R65266:65267 Equiv <> c2 var
R65263:65264 Equiv <> c1 var
R65239:65244 Equiv <> cequiv def
R65249:65250 Equiv <> c2 var
R65246:65247 Equiv <> c1 var
R65287:65292 Equiv <> cequiv def
R65295:65301 Equiv <> cequiv' def
R65353:65359 Equiv <> E_equiv constr
R65353:65359 Equiv <> E_equiv constr
R65455:65461 Equiv <> E_equiv constr
R65455:65461 Equiv <> E_equiv constr
def 65684:65703 <> identity_assignment'
R65709:65715 Equiv <> cequiv' def
R65724:65728 Imp <> ::x_'::='_x not
R65723:65723 Imp <> X def
R65729:65731 Imp <> AId constr
R65733:65733 Imp <> X def
R65717:65720 Imp <> ::'SKIP' not
R65755:65761 Equiv <> cequiv' def
R65890:65895 Imp <> update def
R65910:65910 Imp <> X def
R65902:65902 Imp <> X def
R65876:65882 Equiv <> E_equiv constr
R65890:65895 Imp <> update def
R65910:65910 Imp <> X def
R65902:65902 Imp <> X def
R65876:65882 Equiv <> E_equiv constr
R65955:65967 Equiv <> stequiv_trans prfax
R65955:65967 Equiv <> stequiv_trans prfax
R65995:66001 Equiv <> stequiv def
R66018:66028 Imp <> update_same thm
R66018:66028 Imp <> update_same thm
prf 67403:67433 <> swap_noninterfering_assignments
R67537:67542 Equiv <> cequiv def
R67585:67586 Imp <> ::x_';'_x not
R67578:67582 Imp <> ::x_'::='_x not
R67576:67577 Equiv <> l2 var
R67583:67584 Equiv <> a2 var
R67589:67593 Imp <> ::x_'::='_x not
R67587:67588 Equiv <> l1 var
R67594:67595 Equiv <> a1 var
R67558:67559 Imp <> ::x_';'_x not
R67551:67555 Imp <> ::x_'::='_x not
R67549:67550 Equiv <> l1 var
R67556:67557 Equiv <> a1 var
R67562:67566 Imp <> ::x_'::='_x not
R67560:67561 Equiv <> l2 var
R67567:67568 Equiv <> a2 var
R67505:67524 Equiv <> var_not_used_in_aexp ind
R67529:67530 Equiv <> a1 var
R67526:67527 Equiv <> l2 var
R67473:67492 Equiv <> var_not_used_in_aexp ind
R67497:67498 Equiv <> a2 var
R67494:67495 Equiv <> l1 var
R67460:67463 Coq.Init.Logic <> :type_scope:x_'<>'_x not
R67458:67459 Equiv <> l1 var
R67464:67465 Equiv <> l2 var
